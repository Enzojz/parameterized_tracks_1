local paramsutil = require "paramsutil"
local func = require "track_design_patterns/func"
local coor = require "track_design_patterns/coor"
local line = require "track_design_patterns/coorline"
local arc = require "track_design_patterns/coorarc"
local trackEdge = require "track_design_patterns/trackedge"
local station = require "track_design_patterns/stationlib"
local pipe = require "track_design_patterns/pipe"
local tdp = require "track_design_patterns"

local math = math
local abs = math.abs
local pi = math.pi
local atan = math.atan
local cos = math.cos
local sin = math.sin
local unpack = table.unpack

local slopeList = {0, 2.5, 5, 7.5, 10, 12.5, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 90, 100}
local rList = {tdp.infi * 0.001, 5, 3.5, 2, 1, 4 / 5, 2 / 3, 3 / 5, 1 / 2, 1 / 3, 1 / 4, 1 / 5, 1 / 6, 1 / 8, 1 / 10, 1 / 20}

local function params()
    local sp = "·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·\n"
    return tdp.trackType + {
        {
            key = "nbTracks",
            name = _("Number of tracks"),
            values = func.seqMap({1, 10}, tostring),
            defaultIndex = 1
        },
        {
            key = "sign",
            name = sp,
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "radius",
            name = _("Radius") .. "(m)",
            values = pipe.from("∞") + func.map(func.range(rList, 2, #rList), function(r) return tostring(math.floor(r * 1000 + 0.5)) end),
            defaultIndex = 0
        },
        {
            key = "slopeSignA",
            name = sp .. "\n" .. _("Slope"),
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "slopeA",
            name = _("Begin") .. "(‰)",
            values = func.map(slopeList, tostring),
            defaultIndex = 0
        },
        {
            key = "slopeSignB",
            name = "",
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "slopeB",
            name = _("End") .. "(‰)",
            values = pipe.new + {_("Sync")} + func.map(slopeList, tostring),
            defaultIndex = 0
        },
        {
            key = "lengthM",
            name = sp .. "\n" .. _("Length") .. " \n\n×1000m",
            values = func.seqMap({0, 9}, tostring),
            defaultIndex = 0
        },
        {
            key = "lengthC",
            name = "×100m",
            values = func.seqMap({0, 9}, tostring),
            defaultIndex = 1
        },
        {
            key = "lengthD",
            name = "×10m",
            values = func.seqMap({0, 9}, tostring),
            defaultIndex = 0
        },
        {
            key = "signalSpacing",
            name = sp .. "\n" .. _("Signal Spacing"),
            values = {_("None"), _("Moving Block"), "100", "200", "400", "600", "800", "1000", "1500"},
            defaultIndex = 4
        
        },
        {
            key = "signalPattern",
            name = _("Signal Pattern"),
            values = {"↓↑↓↑", "↑↓↑↓", "↓↓↑↑", "↑↑↓↓", "↓↓↓↓", "↑↑↑↑", _("↕↕↕↕")},
            defaultIndex = 0,
        },
        {
            key = "height",
            name = _("Altitude Adjustment") .. "(m)",
            values = func.seqMap({9, 30}, tostring),
            defaultIndex = 6
        }
    }
end

local function defaultParams(param)
    local function limiter(d, u)
        return function(v) return v and v < u and v or d end
    end
    func.forEach(params(), function(i)param[i.key] = limiter(i.defaultIndex or 0, #i.values)(param[i.key]) end)
end

local updateFn = function()
    return function(params)
        defaultParams(params)
        
        local trackType = tdp.trackList[params.trackType + 1]
        local catenary = params.catenary == 1
        local trackBuilder = trackEdge.builder(catenary, trackType)
        
        local nbTracks = params.nbTracks + 1
        local radius = (rList[params.radius + 1] * 1000) * (params.sign == 0 and 1 or -1)
        local length = params.lengthD * 10 + params.lengthC * 100 + params.lengthM * 1000
        length = length > 0 and length or 1
        local signalSpacing = ({length, 20, 100, 200, 400, 600, 800, 1000, 1500})[params.signalSpacing + 1]
        
        local slopeA = slopeList[params.slopeA + 1] * (params.slopeSignA == 0 and 1 or -1) * 0.001
        local slopeB = params.slopeB == 0 and slopeA or slopeList[params.slopeB] * (params.slopeSignB == 0 and 1 or -1) * 0.001
        
        local offsets = tdp.buildCoors(nbTracks, nbTracks)
        local initRad = radius > 0 and pi or 0
        local dRad = math.abs(length / radius) < 2 * pi and -length / radius or 2 * pi * 0.99
        
        local function signalGrouping(result, leftLength)
            return leftLength <= 0 and result / 1 or signalGrouping(result / ((length - leftLength) / length), leftLength - signalSpacing)
        end
        
        local fz =
        (slopeA == slopeB) and
            pipe.exec * function()
                local ln = line.byPtPt(coor.xy(initRad, 0), coor.xy(initRad + dRad, slopeA * length))
                return function(rad) return {z = (ln - line.byVecPt(coor.xy(0, 1), coor.xy(rad, 0))).y, s = slopeA} end
            end
            or
            pipe.exec * function()
                local radRef = (slopeA > slopeB and 1 or -1) * 0.5 * pi
                local radA, radB = atan(slopeA), atan(slopeB)
                local r = length / (sin(radB) - sin(radA))
                local arch = arc.byOR(coor.xy(0, cos(radA) * r), r)
                return function(rad)
                    local pt =
                        func.min(arch / line.byVecPt(coor.xy(0, 1), coor.xy((rad - initRad) * length / dRad + r * sin(radA), 0))
                            , function(a, b) return a:length() < b:length() end)
                    return {z = pt.y, s = math.tan(arch:rad(pt) - radRef)}
                end
            end
        
        local limits = signalGrouping(pipe.new, length)
            * function(r) return func.map2(
                func.range(r, 1, #r - 1),
                func.range(r, 2, #r),
                function(f, t) return
                    {
                        inf = initRad + f * dRad,
                        mid = initRad + (f + t) * 0.5 * dRad,
                        sup = initRad + t * dRad
                    }
                end)
            end
        
        local guideline = arc.byOR(coor.xyz(radius, 0, 0), abs(radius)):withLimits({
            inf = initRad,
            mid = initRad + 0.5 * dRad,
            sup = initRad + dRad,
            offset = 0
        })
        
        local guidelines = offsets.tracks
            * (radius < 0 and pipe.noop() or pipe.rev())
            * pipe.map(function(o)
                local g = (guideline + o)
                return limits
                    * pipe.map(function(l) return func.with(g:withLimits(l), {offset = o}) end)
            end)
        
        local zsList = limits
            * pipe.map(function(l)
                return {
                    {coor.transZ(fz(l.inf).z), coor.transZ(fz(l.mid).z), coor.transZ(fz(l.inf).s), coor.transZ(fz(l.mid).s)},
                    {coor.transZ(fz(l.mid).z), coor.transZ(fz(l.sup).z), coor.transZ(fz(l.mid).s), coor.transZ(fz(l.sup).s)}
                }
            end)
        
        local arcs = guidelines
            * pipe.map(pipe.map(tdp.generateArc))
            * pipe.map(pipe.map(pipe.range(1, 2)))
            * pipe.map(pipe.map2(zsList, function(a, zs) return func.map2(a, zs, function(ar, nz) return func.map2(ar, nz, coor.apply) end) end))
            * pipe.map(function(segs) return pipe.new * segs
                * pipe.mapi(function(e, i) return {
                    edge = pipe.new * e,
                    snap = pipe.new / {i == 1, false} / {false, i == #segs}
                } end)
            end)
            * pipe.map(station.joinEdges)
            * pipe.map(station.mergeEdges)
        
        
        local signalOffset = 5 / (signalSpacing < 20 and 20 or signalSpacing)
        
        local leftSignal = function(i) return i % 2 == 0 and {{true, signalOffset}} or {} end
        local rightSignal = function(i) return i % 2 == 1 and {{false, 1 - signalOffset}} or {} end
        
        local signalPattern = ({
            function(n, i) return n % 2 == 1 and leftSignal(i) or rightSignal(i) end,
            function(n, i) return n % 2 ~= 1 and leftSignal(i) or rightSignal(i) end,
            function(n, i) return n <= nbTracks * 0.5 and leftSignal(i) or rightSignal(i) end,
            function(n, i) return n > nbTracks * 0.5 and leftSignal(i) or rightSignal(i) end,
            function(_, i) return leftSignal(i) end,
            function(_, i) return rightSignal(i) end,
            function(_, i) return i == 1 and {{true, signalOffset}} or (i == #limits * 2 and {{false, 1 - signalOffset}} or {}) end
        })[params.signalPattern + 1];
        
        return
            pipe.new
            * {
                edgeLists =
                {
                    pipe.new * {arcs} * station.fusionEdges * pipe.map(station.mergeEdges) * (station.prepareEdges(params.freeNodes == 1 or false)) * trackBuilder.tunnel("railroad_old.lua"),
                },
                edgeObjects = length <= signalSpacing and {} or pipe.new
                * func.seqMap({0, nbTracks - 1}, function(n) return
                    func.seqMap({0, #limits * 2 - 1}, function(i) return
                        func.map(signalPattern(n + 1, i + 1), function(p)
                            local isLeft, pos = unpack(p)
                            return {
                                edge = n * #limits * 2 + i,
                                param = pos,
                                left = isLeft,
                                model = params.signalSpacing == 1 and "railroad/signal_mb.mdl" or "railroad/signal_new_block.mdl"
                            }
                        end)
                    end)
                end)
                * pipe.flatten()
                * pipe.flatten(),
                models = {}
            }
            * station.setHeight(-params.height - 9)
    end
end


function data()
    return {
        type = "ASSET_DEFAULT",
        description = {
            name = _("Underground tracks"),
            description = _("Underground tracks with fix radious and signaling spacing.")
        },
        categories = { "track_design_patterns" },
        availability = {
            yearFrom = 1860
        },
        buildMode = "MULTI",
        -- buildMode = "SINGLE",
        -- categories = {"misc"},
        order = 27230,
        skipCollision = true,
        autoRemovable = false,
        params = params(),
        updateFn = updateFn()
    }

end
