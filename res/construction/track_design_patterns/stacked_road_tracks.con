local paramsutil = require "paramsutil"
local colliderutil = require "colliderutil"
local func = require "track_design_patterns/func"
local coor = require "track_design_patterns/coor"
local line = require "track_design_patterns/coorline"
local arc = require "track_design_patterns/coorarc"
local trackEdge = require "track_design_patterns/trackedge"
local streetEdge = require "track_design_patterns/streetedge"
local station = require "track_design_patterns/stationlib"
local pipe = require "track_design_patterns/pipe"
local tdp = require "track_design_patterns"

local math = math
local abs = math.abs
local pi = math.pi
local atan = math.atan
local cos = math.cos
local sin = math.sin
local ceil = math.ceil
local acos = math.acos
local asin = math.asin
local unpack = table.unpack

local slopeList = {0, 2.5, 5, 7.5, 10, 12.5, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 90, 100}
local rList = {tdp.infi * 0.001, 5, 3.5, 2, 1, 4 / 5, 2 / 3, 3 / 5, 1 / 2, 1 / 3, 1 / 4, 1 / 5, 1 / 6, 1 / 8, 1 / 10, 1 / 20}
local tunnelHeight = {8.7, 9.5, 10, 11, 12, 13, 14, 15}
local wallList = {
    "track_design_patterns/2/concrete_wall",
    "track_design_patterns/2/brick_wall",
    "track_design_patterns/2/arch_wall",
}
local colList = {
    "track_design_patterns/2/concrete_col",
    "track_design_patterns/2/brick_col",
    "track_design_patterns/2/brick_col",
}
local fenceList = {
    "track_design_patterns/2/concrete_fence",
    "track_design_patterns/2/brick_fence",
    "track_design_patterns/2/brick_fence"
}
local roofList = {
    "track_design_patterns/roof_closed",
    "track_design_patterns/brick_roof_closed",
    "track_design_patterns/brick_roof_closed"
}
local wallLengthList = {5, 5, 5}
local colLengthList = {10, 5, 5}
local wallHeightList = {15, 15, 15}
local wallWidthList = {0.5, 0.5, 0.5}

local streetConfig = {
    old = {
        country = {
            type = {
                "country_old_small.lua",
                "country_old_medium.lua",
                "country_old_large_upgrade.lua",
                "country_old_large.lua"
            },
            width = {
                12, 18, 18, 18
            },
        },
        street = {
            type = {
                "old_small.lua",
                "old_medium.lua",
                "old_large_upgrade.lua",
                "old_large.lua"
            },
            width = {
                12, 18, 18, 18
            }
        }
    },
    modern = {
        country = {
            type = {
                "country_new_small.lua",
                "country_new_medium.lua",
                "country_new_large.lua",
                "country_new_x_large.lua"
            },
            width = {
                12, 18, 24, 32
            }
        },
        street = {
            type = {
                "new_small.lua",
                "new_medium.lua",
                "new_large.lua",
                "new_x_large.lua"
            },
            width = {
                12, 18, 24, 32
            }
        }
    }
}

local function params()
    local sp = "·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·\n"
    return tdp.trackType + {
        {
            key = "nbTracks",
            name = _("Number of inside tracks"),
            values = func.seqMap({1, 10}, tostring),
            defaultIndex = 1
        },
        {
            key = "extTrack",
            name = _("Number of outside tracks"),
            values = func.seqMap({0, 10}, tostring),
            defaultIndex = 0
        },
        {
            key = "connPos",
            name = sp .. "\n" .. _("Connection End"),
            values = {_("None"), _("Near"), _("Far")},
            defaultIndex = 1
        },
        {
            key = "sign",
            name = sp,
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "radius",
            name = _("Track Radius") .. "(m)",
            values = pipe.from("∞") + func.map(func.range(rList, 2, #rList), function(r) return tostring(math.floor(r * 1000 + 0.5)) end),
            defaultIndex = 0
        },
        {
            key = "streetSign",
            name = sp,
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "streetRadius",
            name = _("Road Radius") .. "(m)",
            values = pipe.new + {_("Sync"), "∞"} + func.map(func.range(rList, 2, #rList), function(r) return tostring(math.floor(r * 1000 + 0.5)) end),
            defaultIndex = 0
        },
        {
            key = "wallHeight",
            name = sp .. "\n" .. _("Tunnel Height") .. "(m)",
            values = func.map(tunnelHeight, tostring),
            defaultIndex = 1
        },
        {
            key = "openSide",
            name = _("Exposed Side"),
            values = {"A", "B", "A+B"},
            defaultIndex = 0,
        },
        {
            key = "lengthM",
            name = sp .. "\n" .. _("Length") .. " \n\n×1000m",
            values = func.seqMap({0, 9}, tostring),
            defaultIndex = 0
        },
        {
            key = "lengthC",
            name = "×100m",
            values = func.seqMap({0, 9}, tostring),
            defaultIndex = 1
        },
        {
            key = "lengthD",
            name = "×10m",
            values = func.seqMap({0, 9}, tostring),
            defaultIndex = 0
        },
        {
            key = "streetEra",
            name = sp .. "\n" .. _("Era of Road"),
            values = {_("Ancien"), _("Modern")},
            defaultIndex = 1
        },
        {
            key = "streetUsage",
            name = "",
            values = {_("Street"), _("Route"), _("No Street")},
            defaultIndex = 0
        },
        {
            key = "streetType",
            name = _("Road Type"),
            values = {"S", "M", "L", "XL"},
            defaultIndex = 1
        },
        {
            key = "tramTrack",
            name = _("Tram track"),
            values = {_("No"), _("Yes")},
            yearFrom = 0,
            yearTo = 1875
        },
        {
            key = "tramTrack",
            name = _("Tram track"),
            values = {_("No"), _("Yes"), _("Electric")},
            yearFrom = 1875,
            yearTo = 0
        },
        {
            key = "intersection",
            name = _("Intersection"),
            values = {_("No"), _("Yes")},
            defaultIndex = 0,
        },
        {
            key = "slopeSignA",
            name = sp .. "\n" .. _("Slope"),
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "slopeA",
            name = _("Begin") .. "(‰)",
            values = func.map(slopeList, tostring),
            defaultIndex = 0
        },
        {
            key = "slopeSignB",
            name = "",
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "slopeB",
            name = _("End") .. "(‰)",
            values = pipe.new + {_("Sync")} + func.map(slopeList, tostring),
            defaultIndex = 0
        },
        {
            key = "signalSpacing",
            name = sp .. "\n" .. _("Signal Spacing"),
            values = {_("None"), _("Moving Block"), "100", "200", "400", "600", "800", "1000", "1500"},
            defaultIndex = 4
        
        },
        {
            key = "signalPattern",
            name = _("Signal Pattern"),
            values = {"↓↑↓↑", "↑↓↑↓", "↓↓↑↑", "↑↑↓↓", "↓↓↓↓", "↑↑↑↑", _("↕↕↕↕")},
            defaultIndex = 0,
        },
        {
            key = "wallType",
            name = sp .. "\n" .. _("Type"),
            values = {_("Concrete"), _("Stone brick"), _("Arch")},
            defaultIndex = 0
        },
        {
            key = "height",
            name = _("Altitude Adjustment") .. "(m)",
            values = func.seqMap({-15, 5}, tostring),
            defaultIndex = 5
        }
    }
end

local function defaultParams(param)
    local function limiter(d, u)
        return function(v) return v and v < u and v or d end
    end
    
    param.trackType = param.trackType or 0
    param.catenary = param.catenary or 0
    
    func.forEach(
        func.filter(params({}), function(p) return p.key ~= "tramTrack" end),
        function(i)param[i.key] = limiter(i.defaultIndex or 0, #i.values)(param[i.key]) end)
end

local function guideline(radius, length, signalSpacing, wallHeight, connPos, slopeA, slopeB, e)
    local initRad = radius > 0 and pi or 0
    local dRad = math.abs(length / radius) < 2 * pi and -length / radius or 2 * pi * 0.99
    
    local fz =
    (slopeA == slopeB) and
        pipe.exec * function()
            local ln = line.byPtPt(coor.xy(initRad, 0), coor.xy(initRad + dRad, slopeA * length))
            return function(rad) return {z = e + (ln - line.byVecPt(coor.xy(0, 1), coor.xy(rad, 0))).y, s = slopeA} end
        end
        or
        pipe.exec * function()
            local radRef = (slopeA > slopeB and 1 or -1) * 0.5 * pi
            local radA, radB = atan(slopeA), atan(slopeB)
            local r = length / (sin(radB) - sin(radA))
            local arch = arc.byOR(coor.xy(0, cos(radA) * r), r)
            return function(rad)
                local pt =
                    func.min(arch / line.byVecPt(coor.xy(0, 1), coor.xy((rad - initRad) * length / dRad + r * sin(radA), 0))
                        , function(a, b) return a:length() < b:length() end)
                return {z = e + pt.y, s = math.tan(arch:rad(pt) - radRef)}
            end
        end
    
    local function signalGrouping(result, leftLength)
        return leftLength <= 0
            and result
            * pipe.interlace({"f", "t"})
            * pipe.map(function(p) return {pos = p.t, ipos = (p.f + p.t) * 0.5} end)
            / {pos = 0}
            * pipe.sort(function(a, b) return a.pos < b.pos end)
            or signalGrouping(result / (length - leftLength), leftLength - signalSpacing)
    end
    
    local limits = signalGrouping(pipe.new, length)
        * pipe.filter(({
            function(p) return true end,
            function(p) return p.pos == 0 or (p.pos > 5 and p.pos < length - wallHeight * 1.5) end,
            function(p) return p.pos == 0 or (p.pos > wallHeight * 1.5 and p.pos < length - 5) end
        })[connPos])
        * pipe.map(({
            pipe.noop(),
            function(p) return p.ipos and p.ipos <= 5 and func.with(p, {ipos = (p.pos + 5) * 0.5}) or p end,
            function(p) return p.ipos and p.ipos <= wallHeight * 1.5 and func.with(p, {ipos = (p.pos + wallHeight * 1.5) * 0.5}) or p end
        })[connPos]
        )
        * (
        {
            function(r) return
                r / {pos = length, ipos = 0.5 * (r[#r].pos + length)}
            end,
            function(r) return
                r
                / {pos = 5, ipos = 2.5}
                / {pos = length - wallHeight * 1.5, ipos = (r[#r].pos + length - wallHeight * 1.5) * 0.5}
                / {pos = length, ipos = length - wallHeight * 1.45}
            end,
            function(r) return
                r
                / {pos = wallHeight * 1.5, ipos = wallHeight * 1.45}
                / {pos = length - 5, ipos = (r[#r].pos + length - 5) * 0.5}
                / {pos = length, ipos = length - 2.5}
            end
        }
        )[connPos]
        * pipe.sort(function(a, b) return a.pos < b.pos end)
        * pipe.map(function(p) return {pos = p.pos / length, ipos = p.ipos and p.ipos / length or nil} end)
        * pipe.interlace({"f", "t"})
        * pipe.filter(function(r) return r.f.pos ~= r.t.pos end)
        * pipe.map(function(r)
            return
                {
                    inf = initRad + r.f.pos * dRad,
                    mid = initRad + r.t.ipos * dRad,
                    sup = initRad + r.t.pos * dRad
                }
        end)
    
    local guideline = arc.byOR(coor.xyz(radius, 0, 0), abs(radius)):withLimits({
        inf = initRad,
        mid = initRad + 0.5 * dRad,
        sup = initRad + dRad,
        offset = 0
    })
    
    return guideline, fz, limits
end

local updateFn = function()
    return function(params)
        defaultParams(params)
        
        local trackType = tdp.trackList[params.trackType + 1]
        local catenary = params.catenary == 1
        
        local streetGroup = streetConfig[params.streetEra == 0 and "old" or "modern"][params.streetUsage == 0 and "street" or "country"]
        local streetType = streetGroup.type[params.streetType + 1]
        local streetWidth = streetGroup.width[params.streetType + 1]
        local withoutSt = params.streetUsage == 2
        
        local tramType = ({"NO", "YES", "ELECTRIC"})[params.tramTrack + 1]
        local trackBuilder = trackEdge.builder(catenary, trackType)
        local streetBuilder = streetEdge.builder(tramType, streetType)
        
        local nbTracks = params.nbTracks + 1
        local radius = (rList[params.radius + 1] * 1000) * (params.sign == 0 and 1 or -1)
        local radiusSt = params.streetRadius == 0 and radius or (rList[params.streetRadius] * 1000) * (params.streetSign == 0 and 1 or -1)
        local length = params.lengthD * 10 + params.lengthC * 100 + params.lengthM * 1000
        length = length > 25 and length or 25
        
        local signalSpacing = ({length, 20, 100, 200, 400, 600, 800, 1000, 1500})[params.signalSpacing + 1]
        
        local slopeA = slopeList[params.slopeA + 1] * (params.slopeSignA == 0 and 1 or -1) * 0.001
        local slopeB = params.slopeB == 0 and slopeA or slopeList[params.slopeB] * (params.slopeSignB == 0 and 1 or -1) * 0.001
        
        local offsets = tdp.buildCoors(nbTracks, 2)
        local openSide = params.openSide + 1
        
        local extOffsets = pipe.new
            * func.seq(1, params.extTrack)
            * pipe.map(
            ((openSide == 1 and radius > 0) or (openSide == 2 and radius < 0))
                and function(e) return offsets.tracks[#offsets.tracks] + e * station.trackWidth + (nbTracks == 1 and 0 or 0.5) end
                or function(e) return offsets.tracks[1] - e * station.trackWidth + (nbTracks == 1 and 0 or 0.5) end
        )
        local wallHeight = tunnelHeight[params.wallHeight + 1]
        local connPos = params.connPos + 1
        
        
        
        local guidelineTr, fzTr, limitsTr = guideline(radius, length, signalSpacing, wallHeight, connPos, slopeA, slopeB, 0)
        local guidelineSt, fzSt, limitsSt = guideline(radiusSt, length, length, wallHeight, connPos, slopeA, slopeB, wallHeight)
        local guidelineStO = guidelineSt +
            ({
            ((offsets.walls[1] + streetWidth * 0.5) * (radiusSt > 0 and -1 or 1)),
                ((offsets.walls[#offsets.walls] - streetWidth * 0.5) * (radiusSt > 0 and -1 or 1)),
                0
            })[openSide]
        
        local guidelines = offsets.tracks
            * pipe.map(function(o)
                local g = (guidelineTr + o)
                return limitsTr
                    * pipe.map(function(l) return func.with(g:withLimits(l), {offset = o}) end)
            end)
        
        local guidelinesExt = extOffsets
            * pipe.map(function(o)
                local g = (guidelineTr + o)
                return limitsTr
                    * pipe.map(function(l) return func.with(g:withLimits(l), {offset = o}) end)
            end)
        
        local arcs = guidelines
            * pipe.map(pipe.map(tdp.generateArc))
            * pipe.map(pipe.map(pipe.range(1, 2)))
            * pipe.map(pipe.map(pipe.map(function(c) return pipe.new
                / c[1]:withZ(fzTr(c.rad[1]).z)
                / c[2]:withZ(fzTr(c.rad[2]).z)
                / c[3]:withZ(fzTr(c.rad[1]).s)
                / c[4]:withZ(fzTr(c.rad[2]).s)
            end)))
            * pipe.map(function(segs) return pipe.new * segs
                * pipe.mapi(function(e, i) return {
                    edge =
                    pipe.exec * ({
                        function() return pipe.new * e end,
                        function() return pipe.new * (i == 1 and {e[1]} or e) end,
                        function() return pipe.new * (i == #segs and {e[2]} or e) end,
                    })[connPos],
                    snap =
                    pipe.exec * ({
                        function() return pipe.new * {{i == 1, false}, {false, i == #segs}} end,
                        function() return pipe.new * (i == 1 and {{true, true}} or {{i == 2, false}, {false, i == #segs}}) end,
                        function() return pipe.new * (i == #segs and {{true, true}} or {{i == 1, false}, {false, i == #segs - 1}}) end,
                    })[connPos]
                } end)
            end)
            * pipe.map(station.mergeEdges)
        
        local arcsExt = guidelinesExt
            * pipe.map(pipe.map(tdp.generateArc))
            * pipe.map(pipe.map(pipe.range(1, 2)))
            * pipe.map(pipe.map(pipe.map(function(c) return pipe.new
                / c[1]:withZ(fzTr(c.rad[1]).z)
                / c[2]:withZ(fzTr(c.rad[2]).z)
                / c[3]:withZ(fzTr(c.rad[1]).s)
                / c[4]:withZ(fzTr(c.rad[2]).s)
            end)))
            * pipe.map(function(segs) return pipe.new * segs
                * pipe.mapi(function(e, i) return {
                    edge =
                    pipe.exec * ({
                        function() return pipe.new * e end,
                        function() return pipe.new * (i == 1 and {e[1]} or e) end,
                        function() return pipe.new * (i == #segs and {e[2]} or e) end,
                    })[connPos],
                    snap =
                    pipe.exec * ({
                        function() return pipe.new * {{i == 1, false}, {false, i == #segs}} end,
                        function() return pipe.new * (i == 1 and {{true, true}} or {{i == 2, false}, {false, i == #segs}}) end,
                        function() return pipe.new * (i == #segs and {{true, true}} or {{i == 1, false}, {false, i == #segs - 1}}) end,
                    })[connPos]
                } end)
            end)
            * pipe.map(station.mergeEdges)
        
        
        local hasIntersection = params.intersection == 1 and openSide ~= 3
        local street = {
            edge = pipe.new
            * tdp.generateArc(
                guidelineStO:extendLimits(-wallHeight - 0.5),
                wallHeight
            )
            * pipe.map(
                function(c)
                    return {
                        c[1]:withZ(fzSt(c.rad[1]).z),
                        c[2]:withZ(fzSt(c.rad[2]).z),
                        c[3]:withZ(fzSt(c.rad[1]).s),
                        c[4]:withZ(fzSt(c.rad[2]).s)
                    }
                end
            ),
            snap = pipe.new / {false, false} / {false, false} / {true, false} / {false, true},
            freezenNodes = true
        }
        
        local streetInter = hasIntersection
            and {
                edge =
                pipe.exec * function()
                    local pt = guidelineStO:pt(guidelineStO.mid)
                    local pt = pt:withZ(fzSt(guidelineStO.mid).z)
                    local vec = (guidelineStO.o - pt):normalized():withZ(0) * streetWidth * (radiusSt > 0 and 1 or -1) * (openSide == 1 and 1 or -1)
                    return {{pt, pt + vec * 0.75, vec, vec}, {pt + vec * 0.75, pt + vec, vec, vec}}
                end,
                snap = pipe.new / {false, false} / {false, true}
            }
            or {edge = pipe.new, snap = pipe.new, freezenNodes = true}
        
        local signalOffset = 5 / (signalSpacing < 20 and 20 or signalSpacing)
        
        local leftSignal = function(i) return i % 2 == 0 and {{true, signalOffset}} or {} end
        local rightSignal = function(i) return i % 2 == 1 and {{false, 1 - signalOffset}} or {} end
        
        local signalPattern = ({
            function(n, i) return n % 2 == 1 and leftSignal(i) or rightSignal(i) end,
            function(n, i) return n % 2 ~= 1 and leftSignal(i) or rightSignal(i) end,
            function(n, i) return n <= nbTracks * 0.5 and leftSignal(i) or rightSignal(i) end,
            function(n, i) return n > nbTracks * 0.5 and leftSignal(i) or rightSignal(i) end,
            function(_, i) return leftSignal(i) end,
            function(_, i) return rightSignal(i) end,
            function(_, i) return {{true, signalOffset}, {false, 1 - signalOffset}} end
        })[params.signalPattern + 1];
        
        local retriveWall = function(ls) return ls[params.wallType + 1] end
        
        local wallGuidelines = offsets.walls
            * (radius < 0 and pipe.noop() or pipe.rev())
            * pipe.map(function(o) return guidelineTr + o end)
        
        local fenceGuidelines =
            pipe.new
            / {
                offsets.walls[1],
                offsets.walls[1] + streetWidth
            }
            / {
                offsets.walls[#offsets.walls] - streetWidth,
                offsets.walls[#offsets.walls]
            }
            / {
                -0.5 * streetWidth,
                0.5 * streetWidth
            }
            * pipe.select(openSide)
            * (radiusSt < 0 and pipe.noop() or pipe.rev())
            * pipe.map(function(o) return guidelineSt + (radiusSt > 0 and -o or o) end)
        
        local function mPlace(fz, mZ)
            return function(fitModel, arcL, arcR, rad1, rad2)
                local z1, z2 = fz(rad1).z, fz(rad2).z
                local size = {
                    lb = arcL:pt(rad1):withZ(z1),
                    lt = arcL:pt(rad2):withZ(z2),
                    rb = arcR:pt(rad1):withZ(z1),
                    rt = arcR:pt(rad2):withZ(z2)
                }
                return mZ * fitModel(size)
            end
        end
        
        local makeWallA = tdp.makeFn(false)(
            retriveWall(({colList, wallList, colList})[openSide]),
            tdp.fitModel,
            mPlace(fzTr, coor.transZ(wallHeight - 10)),
            0.5,
            retriveWall(({colLengthList, wallLengthList, colLengthList})[openSide])
        )
        local makeWallB = tdp.makeFn(true)(
            retriveWall(({wallList, colList, colList})[openSide]),
            tdp.fitModel,
            mPlace(fzTr, coor.transZ(wallHeight - 10)),
            0.5,
            retriveWall(({wallLengthList, colLengthList, colLengthList})[openSide])
        )
        local makeFenceA = tdp.makeFn(true)(
            retriveWall(fenceList),
            tdp.fitModel,
            mPlace(fzSt, coor.I()),
            0.5,
            5
        )
        local makeFenceB = tdp.makeFn(false)(
            retriveWall(fenceList),
            tdp.fitModel,
            mPlace(fzSt, coor.I()),
            0.5,
            5
        )
        local makeRoof = tdp.makeFn(false)(
            retriveWall(roofList),
            tdp.fitModel,
            mPlace(fzTr, coor.transZ(wallHeight)),
            5,
            5
        )
        local makeStRoof = tdp.makeFn(false)(
            retriveWall(roofList),
            tdp.fitModel,
            mPlace(fzTr, coor.transZ(wallHeight)),
            5,
            5,
            streetWidth
        )
        local walls = pipe.new
            / {
            (nbTracks == 1 and pipe.new or wallGuidelines * pipe.range(1, #wallGuidelines - 1) * pipe.map(makeWallA))
                / makeWallB(wallGuidelines[#wallGuidelines])
                / (withoutSt and {} or makeFenceA(fenceGuidelines[radiusSt < 0 and 1 or 2]))
            }
            / {
            (nbTracks == 1 and pipe.new or wallGuidelines * pipe.range(2, #wallGuidelines) * pipe.map(makeWallB))
                / makeWallA(wallGuidelines[1])
                / makeFenceB(fenceGuidelines[radiusSt > 0 and 1 or 2])
            }
            / {
                wallGuidelines * pipe.range(1, #wallGuidelines - 1) * pipe.map(makeWallA)
                / makeWallB(wallGuidelines[#wallGuidelines])
                / (withoutSt and {} or makeFenceA(fenceGuidelines[radiusSt < 0 and 1 or 2]))
                / (withoutSt and {} or makeFenceB(fenceGuidelines[radiusSt > 0 and 1 or 2]))
            }
            * pipe.select(openSide)
            * pipe.flatten()
            * pipe.map(pipe.flatten())
            + (pipe.new * offsets.tracks * pipe.map(function(o) return guidelineTr + o end) * pipe.map(makeRoof) * pipe.flatten())
            + (withoutSt and {} or makeStRoof(guidelineStO:extendLimits(-0.5)))
        
        local dRad = function(f, t)
            local s = f:cross(t)
            local c = f:dot(t)
            return acos(c)
        end
        
        local slot = openSide == 3 and {} or
            tdp.generatePolyArc(
            ({
                {guidelineTr, wallGuidelines[#wallGuidelines]},
                {wallGuidelines[1], guidelineTr},
            })[openSide]
            , "inf", "sup")(0, 0.25)
            * pipe.map(pipe.map(function(p) return coor.transZ(fzTr(p.rad).z)(p) end))
            * station.projectPolys(coor.I())
        
        local polyGen =
            {
                greater =
                tdp.generatePolyArc({wallGuidelines[1], wallGuidelines[#wallGuidelines]}, "inf", "sup")(0, -1)
                * pipe.map(pipe.map(function(p) return coor.transZ(fzTr(p.rad).z)(p) end))
                * station.projectPolys(coor.I()),
                slot =
                tdp.generatePolyArc(
                    {
                        wallGuidelines[1] + (radius > 0 and 1 or -1) * (openSide == 2 and -1.5 or 0),
                        wallGuidelines[#wallGuidelines] + (radius > 0 and 1 or -1) * (openSide == 1 and 1.5 or 0)
                    }, "inf", "sup")(0, 0)
                * pipe.map(pipe.map(function(p) return coor.transZ(fzTr(p.rad).z)(p) end))
                * station.projectPolys(coor.I())
                +
                (openSide == 2 and {} or tdp.generatePolyArc({
                    wallGuidelines[1],
                    wallGuidelines[1] + (radius > 0 and 1 or -1) * wallHeight * 2}, "inf", "sup")(0, 0)
                * pipe.map(pipe.map2({0, 0, wallHeight, wallHeight}, function(p, z) return coor.transZ(fzSt(p.rad).z - z)(p) end))
                * station.projectPolys(coor.I())
                )
                +
                (openSide == 1 and {} or tdp.generatePolyArc({
                    wallGuidelines[#wallGuidelines],
                    wallGuidelines[#wallGuidelines] + (radius > 0 and -1 or 1) * wallHeight * 2}, "inf", "sup")(0, 0)
                * pipe.map(pipe.map2({0, 0, wallHeight, wallHeight}, function(p, z) return coor.transZ(fzSt(p.rad).z - z)(p) end))
                * station.projectPolys(coor.I())
                ),
                platform =
                (withoutSt or openSide == 3 or streetWidth < abs(offsets.walls[#offsets.walls] - offsets.walls[1])) and {} or
                pipe.exec * function()
                    local guidelineSt = ({
                        guidelineStO + ((radiusSt > 0 and -0.5 or 0.5) * streetWidth),
                        guidelineStO + ((radiusSt > 0 and 0.5 or -0.5) * streetWidth)
                    })[openSide]
                    
                    local guidelineStExt = ({
                        guidelineStO + ((radiusSt > 0 and -0.5 or 0.5) * (streetWidth + wallHeight * 4)),
                        guidelineStO + ((radiusSt > 0 and 0.5 or -0.5) * (streetWidth + wallHeight * 4))
                    })[openSide]
                    
                    local guidelineWall = ({
                        wallGuidelines[#wallGuidelines] + (radius < 0 and -1 or 1),
                        wallGuidelines[1] + (radius < 0 and 1 or -1)
                    })[openSide]
                    
                    local findIntersection = function(guidelineSt)
                        return pipe.new * (guidelineSt - guidelineWall)
                            * pipe.filter(function(i)
                                local xo = (i - guidelineSt.o):withZ(0):normalized()
                                local io = (guidelineSt:pt(guidelineSt.inf) - guidelineSt.o):withZ(0):normalized()
                                local so = (guidelineSt:pt(guidelineSt.sup) - guidelineSt.o):withZ(0):normalized()
                                return abs(abs(dRad(so, io)) - abs(dRad(xo, io)) - abs(dRad(so, xo))) < 1e-8
                            end)
                    end
                    
                    local intersectionSt = findIntersection(guidelineSt)
                    
                    return
                        tdp.generatePolyArcFn({guidelineSt, guidelineWall},
                            function(s) return s.inf end,
                            function(s) return #intersectionSt > 0 and s:rad(intersectionSt[1]) or s.sup end)(0, 0)
                        * pipe.map(pipe.map(function(p) return coor.transZ(fzSt(p.rad).z)(p) end))
                        * station.projectPolys(coor.I())
                        +
                        tdp.generatePolyArcFn({guidelineSt, guidelineStExt},
                            function(s) return s.inf end,
                            function(s) return #intersectionSt > 0 and s:rad(intersectionSt[1]) or s.sup end)(0, 0)
                        * pipe.map(pipe.map2({wallHeight, wallHeight, 0, 0}, function(p, z) return coor.transZ(fzSt(p.rad).z - z)(p) end))
                        * station.projectPolys(coor.I())
                end
                ,
                less = withoutSt and {} or
                tdp.generatePolyArc({guidelineStO, guidelineStO}, "inf", "sup")(0, 0.5 * streetWidth)
                * pipe.map(pipe.map(function(p) return coor.transZ(fzSt(p.rad).z)(p) end))
                * station.projectPolys(coor.I())
                + tdp.generatePolyArc({wallGuidelines[1], wallGuidelines[#wallGuidelines]}, "inf", "sup")(0, 0)
                * pipe.map(pipe.map(function(p) return coor.transZ(fzTr(p.rad).z + wallHeight)(p) end))
                * station.projectPolys(coor.I())
            }
        
        return
            pipe.new
            * {
                edgeLists = pipe.new
                / (pipe.new * arcs * station.prepareEdges * trackBuilder.nonAligned())
                / (pipe.new * arcsExt * station.prepareEdges * trackBuilder.normal())
                / (not withoutSt and pipe.new * {street, streetInter} * station.prepareEdges * streetBuilder.nonAligned() or nil)
                ,
                edgeObjects = length <= signalSpacing and {} or pipe.new
                * func.seqMap({0, nbTracks + params.extTrack - 1}, function(n) return
                    func.seqMap(
                        (
                        {
                            {0, #limitsTr * 2 - 1},
                            {1, #limitsTr * 2 - 4},
                            {2, #limitsTr * 2 - 4}
                        }
                        )[connPos]
                        , function(i) return
                            func.map(signalPattern(n + 1, i + 1), function(p)
                                local isLeft, pos = unpack(p)
                                return {
                                    edge = n * (#limitsTr * 2 - (connPos == 0 and 0 or 1)) + i,
                                    param = pos,
                                    left = isLeft,
                                    model = params.signalSpacing == 1 and "railroad/signal_mb.mdl" or "railroad/signal_new_block.mdl"
                                }
                            end)
                        end)
                end)
                * pipe.flatten()
                * pipe.flatten(),
                models = walls * pipe.flatten(),
                colliders = {
                    {
                        params = {halfExtents = {0, 0, 0}},
                        transf = {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1},
                        type = "BOX"
                    }
                },
                terrainAlignmentLists = station.mergePoly(polyGen)({}),
                groundFaces =
                pipe.new * slot
                * pipe.map(function(p) return {face = p, modes = {{type = "FILL", key = "hole"}}} end)
            }
            * station.setHeight(func.seq(-15, 5)[params.height + 1])
    end
end


function data()
    return {
        type = "ASSET_DEFAULT",
        description = {
            name = _("Road stacking over tracks"),
            description = _("One road stacking over one or many tracks with fix radious and signaling spacing.")
        },
        categories = { "track_design_patterns" },
        availability = {
            yearFrom = 1850
        },
        buildMode = "MULTI",
        -- buildMode = "SINGLE",
        -- categories = {"misc"},
        order = 27219,
        skipCollision = true,
        autoRemovable = false,
        params = params(),
        updateFn = updateFn()
    }

end
