local paramsutil = require "paramsutil"
local func = require "track_design_patterns/func"
local coor = require "track_design_patterns/coor"
local line = require "track_design_patterns/coorline"
local arc = require "track_design_patterns/coorarc"
local trackEdge = require "track_design_patterns/trackedge"
local station = require "track_design_patterns/stationlib"
local pipe = require "track_design_patterns/pipe"
local tdp = require "track_design_patterns"

local dump = require "datadumper"

local abs = math.abs
local pi = math.pi
local atan = math.atan
local sqrt = math.sqrt
local acos = math.acos
local cos = math.cos
local sin = math.sin
local tan = math.tan

local slopeList = {0, 2.5, 5, 7.5, 10, 12.5, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 90, 100}
local wallList = {
    "track_design_patterns/concrete_wall.mdl",
    "track_design_patterns/brick_wall.mdl",
    "track_design_patterns/arch_wall.mdl",
    "asset/track_multi_sound_insulation_10m.mdl"
}
local wallHeightList = {15, 15, 15, 8}
local wallLengthList = {5, 5, 5, 10}
local wallTransList = {
    function(h) return (h > 0 and coor.I() or coor.flipX()) * coor.transZ((h > 0 and h or 0) - 10) end,
    function(h) return (h > 0 and coor.I() or coor.flipX()) * coor.transZ((h > 0 and h or 0) - 10) end,
    function(h) return (h > 0 and coor.I() or coor.flipX()) * coor.transZ((h > 0 and h or 0) - 10) end,
    function(h) return (h > 0 and coor.I() or coor.flipX()) * coor.transY(3.2) * coor.rotZ(pi * 0.5) * coor.transZ((h > 8 and 8 or abs(h)) - 5.1) end
}

local sizeSwitch = {4, 5, 6, 7, 9, 12, 14, 16, 18}

local function params()
    local sp = "·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·\n"
    return {
        paramsutil.makeTrackTypeParam(),
        paramsutil.makeTrackCatenaryParam(),
        {
            key = "cot",
            name = "Turnout #",
            values = func.map(func.map(sizeSwitch, math.floor), tostring),
            defaultIndex = 5
        },
        {
            key = "nbTracks",
            name = _("Number of tracks"),
            values = func.seqMap({1, 10}, tostring),
            defaultIndex = 0
        },
        {
            key = "distance",
            name = _("Track Distance"),
            values = {"5", "9", "10"},
            defaultIndex = 0,
        },
        {
            key = "isOpen",
            name = _("Last Section"),
            values = {_("Open"), _("Closed")},
            defaultIndex = 0,
        },
        {
            key = "orientation",
            name = _("Orientaion"),
            values = {_("Left"), _("Right")},
            defaultIndex = 1,
        },
        {
            key = "slopeSign",
            name = sp,
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "slope",
            name = _("Slope") .. "(‰)",
            values = func.map(slopeList, tostring),
            defaultIndex = 0
        },
        {
            key = "wallAHeight",
            name = sp .. "\n" .. _("Wall A") .. "\n" .. _("Height") .. "(m)",
            values = pipe.new * {"↓", _("None")} + func.seqMap({1, 15}, tostring),
            defaultIndex = 1
        },
        {
            key = "wallAType",
            name = _("Type"),
            values = {_("Concrete"), _("Stone brick"), _("Arch"), _("Noise barrier")},
            defaultIndex = 0
        },
        {
            key = "wallBHeight",
            name = sp .. "\n" .. _("Wall B") .. "\n" .. _("Height") .. "(m)",
            values = pipe.new * {_("Sync"), "↓", _("None")} + func.seqMap({1, 15}, tostring),
            defaultIndex = 0
        },
        {
            key = "wallBType",
            name = _("Type"),
            values = {_("Sync"), _("Concrete"), _("Stone brick"), _("Arch"), _("Noise barrier")},
            defaultIndex = 0
        },
        {
            key = "wallOffset",
            name = sp .. "\n" .. "Wall-Track distance",
            values = func.seqMap({0, 8}, function(n) return tostring(n * 0.5) end),
            defaultIndex = 1
        },
        {
            key = "height",
            name = _("Altitude Adjustment") .. "(m)",
            values = func.seqMap({-10, 15}, tostring),
            defaultIndex = 10
        }
    }
end

local function defaultParams(param)
    local function limiter(d, u)
        return function(v) return v and v < u and v or d end
    end
    func.forEach(params(), function(i)param[i.key] = limiter(i.defaultIndex or 0, #i.values)(param[i.key]) end)
end

local updateFn = function()
    return function(params)
        defaultParams(params)
        
        local trackType = ({"standard.lua", "high_speed.lua"})[params.trackType + 1]
        local catenary = params.catenary == 1
        local trackBuilder = trackEdge.builder(catenary, trackType)
        local nbTracks = params.nbTracks + 1
        local wallOffset = params.wallOffset * 0.5
        local slope = slopeList[params.slope + 1] * (params.slopeSign == 0 and 1 or -1) * 0.001
        local isOpen = params.isOpen == 0
        local distance = ({5, 9, 10})[params.distance + 1]
        
        local cot = sizeSwitch[params.cot + 1]
        local rad = atan(1 / cot)
        local w = 1.435
        local r = w / (1 - cos(rad)) - w * 0.5
        
        local guidelines = {
            l = arc.byOR(coor.xy(tdp.infi, 0), tdp.infi),
            r = arc.byOR(coor.xy(r, 0), r),
        }
        
        local dy, ept, vec, ipt = table.unpack(cot < 5 and
            pipe.exec * function()
                local rad = acos(1 - distance * 0.5 / r)
                local vec = coor.xyz(sin(rad), cos(rad), 0)
                local ept = coor.xyz(distance * 0.5, r * sin(rad), 0)
                local ipt = ept
                local dy = distance / sin(rad)
                return {dy, ept, vec, ipt}
            end
            or
            pipe.exec * function()
                local vec = coor.xyz(sin(rad), cos(rad), 0)
                local ept = coor.xyz(distance * 0.5, r * sin(rad) + (distance * 0.5 - (r - r * cos(rad))) / tan(rad), 0)
                local ipt = ept - vec * 0.5 * (distance - w) * 0.5 / tan(rad)
                local dy = distance / sin(rad)
                return {dy, ept, vec, ipt}
            end
        )
        
        local turnouts =
            cot < 5
            and pipe.new
            / {coor.xyz(0, 0, 0), ept, coor.xyz(0, 1, 0), vec}
            or pipe.new
            / {coor.xyz(0, 0, 0), ipt, coor.xyz(0, 1, 0), vec}
            / {ipt, ept + vec * 5, vec, vec}
        
        local fz = function(pt) return coor.xyz(pt.x, pt.y, pt.y * slope) end
        
        local trY = function(e, n)
            return e * pipe.mapi(function(e) return {e[1] .. coor.transY(n * dy), e[2] .. coor.transY(dy * n), e[3], e[4]} end)
                * pipe.map(pipe.map(function(n) return n .. (params.orientation == 1 and coor.I() or coor.flipX()) end))
                * pipe.map(pipe.map(fz))
        end
        
        local edge =
            (
            pipe.new * func.seq(0, nbTracks - 1) * pipe.map(function(n)
                return {
                    edge = trY(turnouts, n),
                    snap = cot < 5 and pipe.new / {false, true} or pipe.new / {false, false} / {false, true}
                }
            end)
            +
            pipe.new * func.seq(0, nbTracks - 2) * pipe.map(function(n)
                return {
                    edge = trY(pipe.new / {coor.xyz(0, 0, 0), coor.xyz(0, dy, 0), coor.xyz(0, 1, 0), coor.xyz(0, 1, 0)}, n),
                    snap = pipe.new / {false, false}
                }
            end)
            / {
                edge = (pipe.new
                / {coor.xyz(0, -5, 0), coor.xyz(0, 0, 0), coor.xyz(0, 1, 0), coor.xyz(0, 1, 0)}
                + (isOpen and {{coor.xyz(0, dy * nbTracks - dy, 0), coor.xyz(0, dy * nbTracks + 5, 0), coor.xyz(0, 1, 0), coor.xyz(0, 1, 0)}} or {})
                ) * pipe.map(pipe.map(fz)),
                snap = pipe.new * (isOpen and {{true, false}, {false, true}} or {{true, false}})
            }
            )
            * station.mergeEdges
        
        
        
        
        guidelines.r = pipe.exec * function()
            local rm = guidelines.r:withLimits(
                {
                    sup = guidelines.r:rad(ipt),
                    mid = guidelines.r:rad(coor.xy(0, 0)),
                    inf = guidelines.r:rad(coor.xy(0, -1))
                }
            )
            local ext = arc.byOR(ipt - (ipt - guidelines.r.o):normalized() * tdp.infi, tdp.infi)
            ext = ext:withLimits(
                {
                    sup = ext:rad(ept),
                    mid = ext:rad(ipt),
                    inf = ext:rad(ipt * 2),
                }
            )
            return pipe.new / rm / ext
        end
        
        guidelines.l = pipe.new /
            guidelines.l:withLimits(
                {
                    sup = guidelines.l:rad(coor.xy(0, (nbTracks - 1) * dy)),
                    mid = guidelines.l:rad(coor.xy(0, -5)),
                    inf = guidelines.l:rad(coor.xy(0, 0))
                }
            )
            + (
            isOpen
            and pipe.new /
            guidelines.l:withLimits(
                {
                    sup = guidelines.l:rad(coor.xy(0, nbTracks * dy + 5)),
                    mid = guidelines.l:rad(coor.xy(0, (nbTracks - 1) * dy)),
                    inf = guidelines.l:rad(coor.xy(0, -1))
                }
            )
            or func.map(guidelines.r, function(g) return arc.byOR(g.o + coor.xy(0, (nbTracks - 1) * dy), g.r):withLimits(g:limits()) end)
        )
        local wallOffsets = {
            l = -2.5 - 0.25,
            r = 2.5 + 0.25
        }
        
        local retriveWall = {
            A = function(ls) return ls[params.wallAType + 1] end,
            B = function(ls) return params.wallBType == 0 and ls[params.wallAType + 1] or ls[params.wallBType] end
        }
        local wallHeight = {
            A = func.seq(-1, 15)[params.wallAHeight + 1],
            B = params.wallBHeight == 0 and func.seq(-1, 15)[params.wallAHeight + 1] or func.seq(-1, 15)[params.wallBHeight]
        }
        
        local terrainGuidelines = pipe.exec * function()
            local sort = function(r) return
                {
                    ref = func.map(r, pipe.select("ref")),
                    outer = func.map(r, pipe.select("outer")),
                    inner = func.map(r, pipe.select("inner")),
                }
            end
            local gen = function(s)
                return {
                    ref = s(0),
                    outer = s(wallOffset + 1),
                    inner = s(wallOffset - 1)
                }
            end
            return
                {
                    l = guidelines.l
                    * pipe.map(function(g)
                        return pipe.new * {wallOffsets.l, wallOffsets.r}
                            * pipe.map(function(o) local ref = g + (-o) return function(w) return ref + (o < 0 and w or -w) end end)
                            * pipe.map(gen)
                            * sort
                    end),
                    r = guidelines.r
                    * pipe.mapFlatten(function(g)
                        return func.seqMap({1, nbTracks - (isOpen and 0 or 1)}, function(n)
                            return arc.byOR(g.o + coor.xy(0, (n - 1) * dy), g.r):withLimits(g:limits())
                        end)
                    end)
                    * pipe.map(function(g)
                        return pipe.new * {wallOffsets.l, wallOffsets.r}
                            * pipe.map(function(o) local ref = g + (-o) return function(w) return ref + (o < 0 and w or -w) end end)
                            * pipe.map(gen)
                            * sort
                    end)
                }
        end
        
        local polyGen = tdp.polyGen(slope)
        
        local polys = station.mergePoly(
            table.unpack(
                terrainGuidelines.l * pipe.map(function(g) return polyGen(wallHeight.A, wallHeight.B, g, retriveWall.A(wallHeightList), "mid", "sup") end)
                + terrainGuidelines.r * pipe.map(function(g) return polyGen(wallHeight.B, wallHeight.A, g, retriveWall.B(wallHeightList), "mid", "sup") end)
        )
        )({less = 1.5})
        
        
        local fzg = function(g) return function(rad) return {z = g:pt(rad).y * slope, s = slope} end end
        
        local function mPlace(fz)
            return function(guideline, rad1, rad2)
                local rad = rad2 and (rad1 + rad2) * 0.5 or rad1
                local z = fz(rad).z
                local s = -fz(rad).s * (tdp.normalizeRad(rad) > 0.5 * pi and 1 or -1)
                local pt = guideline:pt(rad)
                return coor.shearZoY(s) * coor.transZ(z) * coor.rotZ(rad) * coor.trans(func.with(pt, {z = 0}))
            end
        end
        
        local makeWallA = function(fz, flip)
            return tdp.makeFn(
                retriveWall.A(wallList),
                mPlace(fz),
                retriveWall.A(wallTransList)(wallHeight.A) * (flip and coor.flipX() or coor.I()) * coor.flipX(),
                retriveWall.A(wallLengthList))
        end
        
        local makeWallB = function(fz, flip)
            return tdp.makeFn(
                retriveWall.B(wallList),
                mPlace(fz),
                retriveWall.B(wallTransList)(wallHeight.B) * (flip and coor.flipX() or coor.I()),
                retriveWall.B(wallLengthList))
        end
        
        local makePaving = function(fz)
            return tdp.makeFn(
                "track_design_patterns/paving_base.mdl",
                mPlace(fz),
                coor.transZ(-1e-3),
                5)
        end
        
        local wallGuidelines = {
            guidelines.l * pipe.map(function(g) return g + (abs(wallOffsets.l - wallOffset)) end),
            guidelines.r * pipe.map(function(g) return g + (-abs(wallOffsets.r + wallOffset)) end),
            guidelines.l * pipe.map(function(g) return g + (-abs(wallOffsets.l - wallOffset)) end),
        }
        
        local trackPavingGuidelines =
            {
                pipe.new * func.seqMap({0, wallOffset}, function(d) return func.map(guidelines.l, function(g) return g + (-d + 0.2455 - wallOffsets.l) end) end) * pipe.flatten(),
                pipe.new * func.seqMap({0, wallOffset}, function(d) return func.map(guidelines.r, function(g) return g + (-d + 0.2455 - wallOffsets.r) end) end) * pipe.flatten()
            }
        
        local walls = pipe.new
            + {wallHeight.A == 0 and {} or pipe.new * wallGuidelines[1] * pipe.map(function(g) return makeWallA(fzg(g))(g) end) * pipe.map(pipe.select(2)) * pipe.flatten()}
            + {wallHeight.B == 0 and {} or pipe.new * wallGuidelines[3] * pipe.map(function(g) return makeWallB(fzg(g))(g) end) * pipe.select(1) * pipe.select(1)}
            + {wallHeight.B == 0 and {} or pipe.new * wallGuidelines[2] * pipe.map(function(g) return makeWallB(fzg(g))(g) end) * pipe.map(pipe.select(2)) * pipe.flatten()}
            + {wallHeight.A ~= 0 and pipe.new * trackPavingGuidelines[1] * pipe.map(pipe.map(function(g) return g * makePaving(fzg(g)) end)) * pipe.map(pipe.map(pipe.select(2))) * pipe.flatten() * pipe.flatten() or {}}
            + {wallHeight.B ~= 0 and pipe.new * trackPavingGuidelines[2] * pipe.map(pipe.map(function(g) return g * makePaving(fzg(g)) end)) * pipe.map(pipe.map(pipe.select(2))) * pipe.flatten() * pipe.flatten() or {}}
        
        return
            pipe.new
            * {
                edgeLists = {pipe.new * {edge} * station.prepareEdges * trackBuilder.nonAligned()},
                terrainAlignmentLists = polys,
                models = walls * pipe.flatten(),
            }
            * station.setHeight(func.seq(-10, 15)[params.height + 1])
    end
end


function data()
    return {
        type = "RAIL_DEPOT",
        description = {
            name = _("Track ladders"),
            description = _("A compact tunnel entry")
        },
        availability = {
            yearFrom = 1892
        },
        -- buildMode = "SINGLE",
        -- categories = {"misc"},
        order = 27218,
        -- skipCollision = false,
        -- autoRemovable = false,
        params = params(),
        updateFn = updateFn()
    }

end
