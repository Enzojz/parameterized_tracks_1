local paramsutil = require "paramsutil"
local func = require "track_design_patterns/func"
local coor = require "track_design_patterns/coor"
local line = require "track_design_patterns/coorline"
local arc = require "track_design_patterns/coorarc"
local trackEdge = require "track_design_patterns/trackedge"
local station = require "track_design_patterns/stationlib"
local pipe = require "track_design_patterns/pipe"
local tdp = require "track_design_patterns"

local abs = math.abs
local pi = math.pi
local atan = math.atan
local cos = math.cos
local sin = math.sin

local slopeList = {0, 2.5, 5, 7.5, 10, 12.5, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 90, 100}
local rList = {tdp.infi * 0.001, 5, 3.5, 2, 1, 4 / 5, 2 / 3, 3 / 5, 1 / 2, 1 / 3, 1 / 4, 1 / 5, 1 / 6, 1 / 8, 1 / 10, 1 / 20}
local wallList = {
    "track_design_patterns/concrete_wall.mdl",
    "track_design_patterns/brick_wall.mdl",
    "track_design_patterns/arch_wall.mdl",
    "asset/track_multi_sound_insulation_10m.mdl"
}
local wallLengthList = {5, 5, 5, 10}
local wallHeightList = {15, 15, 15, 8}
local wallTransList = {
    function(h) return (h > 0 and coor.I() or coor.flipX()) * coor.transZ((h > 0 and h or 0) - 10) end,
    function(h) return (h > 0 and coor.I() or coor.flipX()) * coor.transZ((h > 0 and h or 0) - 10) end,
    function(h) return (h > 0 and coor.I() or coor.flipX()) * coor.transZ((h > 0 and h or 0) - 10) end,
    function(h) return (h > 0 and coor.I() or coor.flipX()) * coor.transY(3.2) * coor.rotZ(pi * 0.5) * coor.transZ((h > 8 and 8 or abs(h)) - 5.1) end
}

local function params()
    local sp = "·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·\n"
    return {
        paramsutil.makeTrackTypeParam(),
        paramsutil.makeTrackCatenaryParam(),
        {
            key = "nbTracks",
            name = _("Number of tracks"),
            values = func.seqMap({1, 10}, tostring),
            defaultIndex = 1
        },
        {
            key = "sign",
            name = sp,
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "radius",
            name = _("Radius") .. "(m)",
            values = pipe.from("∞") + func.map(func.range(rList, 2, #rList), function(r) return tostring(math.floor(r * 1000 + 0.5)) end),
            defaultIndex = 0
        },
        {
            key = "slopeSignA",
            name = sp .. "\n" .. _("Slope"),
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "slopeA",
            name = _("Begin") .. "(‰)",
            values = func.map(slopeList, tostring),
            defaultIndex = 0
        },
        {
            key = "slopeSignB",
            name = "",
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "slopeB",
            name = _("End") .. "(‰)",
            values = pipe.new + {_("Sync")} + func.map(slopeList, tostring),
            defaultIndex = 0
        },
        {
            key = "lengthM",
            name = sp .. "\n" .. _("Length") .. " \n\n×1000m",
            values = func.seqMap({0, 9}, tostring),
            defaultIndex = 0
        },
        {
            key = "lengthC",
            name = "×100m",
            values = func.seqMap({0, 9}, tostring),
            defaultIndex = 1
        },
        {
            key = "lengthD",
            name = "×10m",
            values = func.seqMap({0, 9}, tostring),
            defaultIndex = 0
        },
        {
            key = "signalSpacingM",
            name = sp .. "\n" .. _("Signal Spacing") .. "\n\n×1000m",
            values = func.seqMap({0, 9}, tostring),
            defaultIndex = 0
        
        },
        {
            key = "signalSpacingC",
            name = "×100m",
            values = func.seqMap({0, 9}, tostring),
            defaultIndex = 0
        
        },
        {
            key = "signalSpacingD",
            name = "×10m",
            values = func.seqMap({0, 9}, tostring),
            defaultIndex = 0
        
        },
        {
            key = "signalPattern",
            name = _("Signal Pattern"),
            values = {"↓↑↓↑", "↑↓↑↓", "↓↓↑↑", "↑↑↓↓", "↓↓↓↓", "↑↑↑↑", "↕↕↕↕"},
            defaultIndex = 0,
        },
        {
            key = "wallAHeight",
            name = sp .. "\n" .. _("Wall A") .. "\n" .. _("Height") .. "(m)",
            values = pipe.new * {"↓", _("None")} + func.seqMap({1, 15}, tostring),
            defaultIndex = 1
        },
        {
            key = "wallAVar",
            name = _("Variance") .. "(m)",
            values = func.seqMap({-12, 12}, tostring),
            defaultIndex = 12
        },
        {
            key = "wallAType",
            name = _("Type"),
            values = {_("Concrete"), _("Stone brick"), _("Arch"), _("Noise barrier")},
            defaultIndex = 0
        },
        {
            key = "wallBHeight",
            name = sp .. "\n" .. _("Wall B") .. "\n" .. _("Height") .. "(m)",
            values = pipe.new * {_("Sync"), "↓", _("None")} + func.seqMap({1, 15}, tostring),
            defaultIndex = 0
        },
        {
            key = "wallBVar",
            name = _("Variance") .. "(m)",
            values = pipe.new * {_("Sync")} + func.seqMap({-12, 12}, tostring),
            defaultIndex = 0
        },
        {
            key = "wallBType",
            name = _("Type"),
            values = {_("Sync"), _("Concrete"), _("Stone brick"), _("Arch"), _("Noise barrier")},
            defaultIndex = 0
        },
        {
            key = "wallOffset",
            name = sp .. "\n" .. _("Wall-Track distance"),
            values = func.seqMap({0, 8}, function(n) return tostring(n * 0.5) end),
            defaultIndex = 1
        },
        {
            key = "height",
            name = _("Altitude Adjustment") .. "(m)",
            values = func.seqMap({-10, 15}, tostring),
            defaultIndex = 10
        }
    }
end

local function defaultParams(param)
    local function limiter(d, u)
        return function(v) return v and v < u and v or d end
    end
    func.forEach(params(), function(i)param[i.key] = limiter(i.defaultIndex or 0, #i.values)(param[i.key]) end)
end

local updateFn = function()
    return function(params)
        defaultParams(params)
        
        local trackType = ({"standard.lua", "high_speed.lua"})[params.trackType + 1]
        local catenary = params.catenary == 1
        local trackBuilder = trackEdge.builder(catenary, trackType)
        
        local nbTracks = params.nbTracks + 1
        local radius = (rList[params.radius + 1] * 1000) * (params.sign == 0 and 1 or -1)
        local length = params.lengthD * 10 + params.lengthC * 100 + params.lengthM * 1000
        local signalSpacing = (function(s) return s == 0 and length or s end)(params.signalSpacingD * 10 + params.signalSpacingC * 100 + params.signalSpacingM * 1000)
        
        local slopeA = slopeList[params.slopeA + 1] * (params.slopeSignA == 0 and 1 or -1) * 0.001
        local slopeB = params.slopeB == 0 and slopeA or slopeList[params.slopeB] * (params.slopeSignB == 0 and 1 or -1) * 0.001
        
        local offsets = tdp.buildCoors(nbTracks, nbTracks)
        local initRad = radius > 0 and pi or 0
        local dRad = math.abs(length / radius) < 2 * pi and -length / radius or 2 * pi * 0.99
        
        local wallOffset = params.wallOffset * 0.5
        
        local function signalGrouping(result, leftLength)
            return leftLength <= 0 and result / 1 or signalGrouping(result / ((length - leftLength) / length), leftLength - signalSpacing)
        end
        
        local fz =
        (slopeA == slopeB) and
            pipe.exec * function()
                local ln = line.byPtPt(coor.xy(initRad, 0), coor.xy(initRad + dRad, slopeA * length))
                return function(rad) return {z = (ln - line.byVecPt(coor.xy(0, 1), coor.xy(rad, 0))).y, s = slopeA} end
            end
            or
            pipe.exec * function()
                local radRef = (slopeA > slopeB and 1 or -1) * 0.5 * pi
                local radA, radB = atan(slopeA), atan(slopeB)
                local r = length / (sin(radB) - sin(radA))
                local arch = arc.byOR(coor.xy(0, cos(radA) * r), r)
                return function(rad)
                    local pt =
                        func.min(arch / line.byVecPt(coor.xy(0, 1), coor.xy((rad - initRad) * length / dRad + r * sin(radA), 0))
                            , function(a, b) return a:length() < b:length() end)
                    return {z = pt.y, s = math.tan(arch:rad(pt) - radRef)}
                end
            end
        
        local limits = signalGrouping(pipe.new, length)
            * function(r) return func.map2(
                func.range(r, 1, #r - 1),
                func.range(r, 2, #r),
                function(f, t) return
                    {
                        inf = initRad + f * dRad,
                        mid = initRad + (f + t) * 0.5 * dRad,
                        sup = initRad + t * dRad
                    }
                end)
            end
        
        local guideline = arc.byOR(coor.xyz(radius, 0, 0), abs(radius)):withLimits({
            inf = initRad,
            mid = initRad + 0.5 * dRad,
            sup = initRad + dRad,
            offset = 0
        })
        
        local guidelines = offsets.tracks
            * (radius < 0 and pipe.noop() or pipe.rev())
            * pipe.map(function(o)
                local g = (guideline + o)
                return limits
                    * pipe.map(function(l) return func.with(g:withLimits(l), {offset = o}) end)
            end)
        
        local zsList = limits
            * pipe.map(function(l)
                return {
                    {coor.transZ(fz(l.inf).z), coor.transZ(fz(l.mid).z), coor.transZ(fz(l.inf).s), coor.transZ(fz(l.mid).s)},
                    {coor.transZ(fz(l.mid).z), coor.transZ(fz(l.sup).z), coor.transZ(fz(l.mid).s), coor.transZ(fz(l.sup).s)}
                }
            end)
        
        local arcs = guidelines
            * pipe.map(pipe.map(tdp.generateArc))
            * pipe.map(pipe.map(pipe.range(1, 2)))
            * pipe.map(pipe.map2(zsList, function(a, zs) return func.map2(a, zs, function(ar, nz) return func.map2(ar, nz, coor.apply) end) end))
            * pipe.map(function(segs) return pipe.new * segs
                * pipe.mapi(function(e, i) return {
                    edge = pipe.new * e,
                    snap = pipe.new / {i == 1, false} / {false, i == #segs}
                } end)
            end)
            * pipe.map(station.joinEdges)
            * pipe.map(station.mergeEdges)
        
        
        local signalOffset = 5 / (signalSpacing < 20 and 20 or signalSpacing)
        
        local leftSignal = function(i) return i % 2 == 0 and {{true, signalOffset}} or {} end
        local rightSignal = function(i) return i % 2 == 1 and {{false, 1 - signalOffset}} or {} end
        
        local signalPattern = ({
            function(n, i) return n % 2 == 1 and leftSignal(i) or rightSignal(i) end,
            function(n, i) return n % 2 ~= 1 and leftSignal(i) or rightSignal(i) end,
            function(n, i) return n <= nbTracks * 0.5 and leftSignal(i) or rightSignal(i) end,
            function(n, i) return n > nbTracks * 0.5 and leftSignal(i) or rightSignal(i) end,
            function(_, i) return leftSignal(i) end,
            function(_, i) return rightSignal(i) end,
            function(_, i) return i == 1 and {{true, signalOffset}} or (i == #limits * 2 and {{false, 1 - signalOffset}} or {}) end
        })[params.signalPattern + 1];
        
        local wallHeight = {
            A = func.seq(-1, 15)[params.wallAHeight + 1],
            B = params.wallBHeight == 0 and func.seq(-1, 15)[params.wallAHeight + 1] or func.seq(-1, 15)[params.wallBHeight]
        }
        
        local vfz = function(h, va)
            local var = h < 0 and 0 or
                va + h > 15 and 15 - h or
                va + h < 0 and -h or va
            
            local ln = line.byPtPt(coor.xy(initRad, 0), coor.xy(initRad + dRad, var))
            return function(rad) return {z = (ln - line.byVecPt(coor.xy(0, 1), coor.xy(rad, 0))).y, s = (-ln.a / ln.b) / length * dRad} end
        end
        
        local retriveWall = {
            A = function(ls) return ls[params.wallAType + 1] end,
            B = function(ls) return params.wallBType == 0 and ls[params.wallAType + 1] or ls[params.wallBType] end
        }
        
        local wallGuidelines = offsets.walls
            * (radius < 0 and pipe.noop() or pipe.rev())
            * pipe.map(function(o) return guideline + o + wallOffset * (o > 0 and 1 or -1) end)
        
        local trackPavingGuidelines =
            offsets.walls
            * (radius < 0 and pipe.noop() or pipe.rev())
            * pipe.map(function(o)
                return pipe.new
                    * func.seq(0, wallOffset)
                    * pipe.map(function(d) return guideline + o + (d - 0.2455) * (o > 0 and 1 or -1) end)
            end)
        
        local function mPlace(vfz)
            return function(guideline, rad1, rad2)
                local rad = rad2 and (rad1 + rad2) * 0.5 or rad1
                local z = fz(rad).z + vfz(rad).z
                local s = -fz(rad).s - vfz(rad).s
                local pt = guideline:pt(rad)
                return coor.shearZoY(s) * coor.transZ(z) * coor.rotZ(rad) * coor.trans(func.with(pt, {z = 0}))
            end
        end
        
        local makeWallA = tdp.makeFn(
            retriveWall.A(wallList),
            mPlace(vfz(wallHeight.A, func.seq(-12, 12)[params.wallAVar + 1])),
            retriveWall.A(wallTransList)(wallHeight.A) * (radius > 0 and coor.flipX() or coor.I()),
            retriveWall.A(wallLengthList))
        
        local makeWallB = tdp.makeFn(
            retriveWall.B(wallList),
            mPlace(vfz(wallHeight.B, params.wallBVar == 0 and func.seq(-12, 12)[params.wallAVar + 1] or func.seq(-12, 12)[params.wallBVar])),
            retriveWall.B(wallTransList)(wallHeight.B) * (radius > 0 and coor.I() or coor.flipX()),
            retriveWall.B(wallLengthList))
        
        local makePaving = tdp.makeFn(
            "track_design_patterns/paving_base.mdl",
            mPlace(vfz(0, 0)),
            coor.transZ(-1e-3),
            5)
        
        local walls = pipe.new
            + {wallHeight.A == 0 and {} or pipe.new * wallGuidelines[1] * makeWallA * pipe.flatten()}
            + {wallHeight.B == 0 and {} or pipe.new * wallGuidelines[2] * makeWallB * pipe.flatten()}
            + {wallHeight.A ~= 0 and pipe.new * trackPavingGuidelines[1] * pipe.map(makePaving) * pipe.flatten() * pipe.flatten() or {}}
            + {wallHeight.B ~= 0 and pipe.new * trackPavingGuidelines[2] * pipe.map(makePaving) * pipe.flatten() * pipe.flatten() or {}}
        
        local terrainGuidelines = offsets.walls
            * (radius < 0 and pipe.noop() or pipe.rev())
            * pipe.map(function(o)
                local ref = guideline + o
                local extra = function(w) return ref + (o > 0 and w or -w) end
                return
                    {
                        ref = ref,
                        outer = extra(wallOffset + 1),
                        inner = extra(wallOffset - 1)
                    }
            end)
        
        local polyGen = function(wallHeight, refHeight, guidelines, wHeight)
            local f = function(s) return s.g and
                tdp.generatePolyArc({s.g, guideline}, "inf", "sup")(-0.2, 0)
                * pipe.map(pipe.map(s.fz))
                * station.projectPolys(coor.I())
                or {}
            end
            local polyGen = function(l, e, g)
                return wallHeight == 0 and f(e) or (wallHeight > 0 and f(g) or f(l))
            end
            
            return {
                slot = polyGen(
                    {},
                    {},
                    {g = guidelines.outer, fz = function(p) return coor.transZ(fz(p.rad).z)(p) end}
                ),
                equal = polyGen(
                    {},
                    refHeight > 0 and {} or {g = guidelines.ref, fz = function(p) return coor.transZ(fz(p.rad).z)(p) end},
                    {}
                ),
                less = polyGen(
                    {g = guidelines.outer, fz = function(p) return coor.transZ(fz(p.rad).z)(p) end},
                    refHeight > 0 and {g = guidelines.ref, fz = function(p) return coor.transZ(fz(p.rad).z)(p) end} or {},
                    {g = guidelines.outer, fz = function(p) return coor.transZ(fz(p.rad).z + wallHeight)(p) end}
                ),
                greater = polyGen(
                    {g = guidelines.outer, fz = function(p) return coor.transZ(fz(p.rad).z - wHeight)(p) end},
                    refHeight > 0 and {g = guidelines.ref, fz = function(p) return coor.transZ(fz(p.rad).z)(p) end} or {},
                    refHeight >= 0 and {g = guidelines.outer, fz = function(p) return coor.transZ(fz(p.rad).z)(p) end} or 
                    {g = guidelines.outer, fz = function(p) return coor.transZ(fz(p.rad).z - wHeight + wallHeight)(p) end}
            )
            }
        end
        
        return
            pipe.new
            * {
                edgeLists = {pipe.new * {arcs} * station.fusionEdges * pipe.map(station.mergeEdges) * station.prepareEdges * trackBuilder.nonAligned()},
                edgeObjects = pipe.new
                * func.seqMap({0, nbTracks - 1}, function(n) return
                    func.seqMap({0, #limits * 2 - 1}, function(i) return
                        func.map(signalPattern(n + 1, i + 1), function(p)
                            local isLeft, pos = table.unpack(p)
                            return {
                                edge = n * #limits * 2 + i,
                                param = pos,
                                left = isLeft,
                                model = "railroad/signal_new_block.mdl"
                            }
                        end)
                    end)
                end)
                * pipe.flatten()
                * pipe.flatten(),
                models = walls * pipe.flatten(),
                terrainAlignmentLists = station.mergePoly(
                    polyGen(wallHeight.A, wallHeight.B, terrainGuidelines[1], retriveWall.A(wallHeightList)),
                    polyGen(wallHeight.B, wallHeight.A, terrainGuidelines[2], retriveWall.B(wallHeightList))
                )({less = 1.5})
            }
            * station.setHeight(func.seq(-10, 15)[params.height + 1])
    end
end


function data()
    return {
        type = "RAIL_DEPOT",
        description = {
            name = _("Parallel tracks"),
            description = _("A compact tunnel entry")
        },
        availability = {
            yearFrom = 1892
        },
        -- buildMode = "SINGLE",
        -- categories = {"misc"},
        order = 27218,
        -- skipCollision = false,
        -- autoRemovable = false,
        params = params(),
        updateFn = updateFn()
    }

end
