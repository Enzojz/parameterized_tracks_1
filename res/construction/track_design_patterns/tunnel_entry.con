local paramsutil = require "paramsutil"
local func = require "track_design_patterns/func"
local coor = require "track_design_patterns/coor"
local trackEdge = require "track_design_patterns/trackedge"
local line = require "track_design_patterns/coorline"
local arc = require "track_design_patterns/coorarc"
local station = require "track_design_patterns/stationlib"
local pipe = require "track_design_patterns/pipe"
local tdp = require "track_design_patterns"
local math = math
local pi = math.pi
local abs = math.abs

local rList = {tdp.infi * 0.001, 5, 3.5, 2, 1, 4 / 5, 2 / 3, 3 / 5, 1 / 2, 1 / 3, 1 / 4, 1 / 5, 1 / 6, 1 / 8, 1 / 10, 1 / 20}
local slopeList = {15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 80, 90, 100}
local generalSlopeList = {0, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 80, 90}
local wallList = {
    "track_design_patterns/2/concrete_wall",
    "track_design_patterns/2/brick_wall",
    "track_design_patterns/2/arch_wall",
}

local function params()
    local sp = "----------------------------\n"
    return tdp.trackType + {
        {
            key = "nbTracks",
            name = _("Number of tracks"),
            values = func.seqMap({1, 10}, tostring),
            defaultIndex = 1
        },
        {
            key = "slopeSign",
            name = sp,
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "slope",
            name = _("Slope") .. "(‰)",
            values = func.map(slopeList, tostring),
            defaultIndex = math.floor(#slopeList * 0.5)
        },
        {
            key = "signS",
            name = sp .. _("Surface"),
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "radiusS",
            name = _("Radius") .. "(m)",
            values = pipe.from("∞") + func.map(func.range(rList, 2, #rList), function(r) return tostring(math.floor(r * 1000 + 0.5)) end),
            defaultIndex = 0
        },
        {
            key = "lengthS",
            name = _("Length") .. "(%)",
            values = func.map(func.seq(3, 10), function(r) return tostring(r * 10) end),
            defaultIndex = 6
        },
        {
            key = "signU",
            name = sp .. _("Underground"),
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "radiusU",
            name = _("Radius") .. "(m)",
            values = pipe.from("∞") + func.map(func.range(rList, 2, #rList), function(r) return tostring(math.floor(r * 1000 + 0.5)) end),
            defaultIndex = 0
        },
        {
            key = "lengthU",
            name = _("Length") .. "(%)",
            values = func.map(func.seq(3, 10), function(r) return tostring(r * 10) end),
            defaultIndex = 7
        },
        {
            key = "paraTracks",
            name = sp .. _("Parellal tracks"),
            values = {_("None"), _("Both"), _("Left"), _("Right")},
            defaultIndex = 1
        },
        {
            key = "generalSlopeSign",
            name = sp,
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "generalSlope",
            name = _("General Slope") .. "(‰)",
            values = func.map(generalSlopeList, tostring),
            defaultIndex = 0
        },
        {
            key = "height",
            name = _("Altitude Adjustment") .. "(m)",
            values = func.seqMap({-10, 10}, tostring),
            defaultIndex = 10
        }
    }

end

local function defaultParams(param)
    local function limiter(d, u)
        return function(v) return v and v < u and v or d end
    end
    
    func.forEach(params(), function(i)param[i.key] = limiter(i.defaultIndex or 0, #i.values)(param[i.key]) end)
end

local updateFn = function(models)
    return function(params)
        defaultParams(params)
        
        local trackType = tdp.trackList[params.trackType + 1]
        local catenary = params.catenary == 1
        local trackBuilder = trackEdge.builder(catenary, trackType)
        local height = 8.5
        
        local pctLength = {
            surface = (params.lengthS + 3) * 0.1,
            underground = (params.lengthU + 3) * 0.1
        }
        
        local nbTracks = params.nbTracks + 1
        local slope = (params.slopeSign == 0 and 1 or -1) * slopeList[params.slope + 1] * 0.001
        
        local offsets = tdp.buildCoors(nbTracks, nbTracks)
        local radius = {
            surface = (rList[params.radiusS + 1] * 1000) * (params.signS == 0 and 1 or -1),
            underground = (rList[params.radiusU + 1] * 1000) * (params.signU == 0 and 1 or -1)
        }
        
        local length = 8.5 / abs(slope)
        
        local radInit = {
            surface = radius.surface > 0 and pi or 0,
            underground = radius.underground > 0 and pi or 0
        }
        
        local radFinal = {
            surface = length / radius.surface * pctLength.surface,
            underground = length / radius.underground * pctLength.underground
        }
        
        local limits = {
            surface = {
                sup = radInit.surface,
                mid = radInit.surface + radFinal.surface - 2.5 / radius.surface,
                inf = radInit.surface + radFinal.surface
            },
            underground = {
                sup = radInit.underground - radFinal.underground,
                mid = radInit.underground - radFinal.underground * 0.5,
                inf = radInit.underground
            },
            side = {
                sup = radInit.surface - 5 / radius.surface,
                mid = radInit.surface - 3 / radius.surface,
                inf = radInit.surface + radFinal.surface - 5 / radius.surface
            }
        }
        
        local guideline = {
            surface = arc.byOR(coor.xy(radius.surface, 0), radius.surface):withLimits(limits.surface),
            underground = arc.byOR(coor.xy(radius.underground, 0), radius.underground):withLimits(limits.underground),
            side = arc.byOR(coor.xy(radius.surface, 0), radius.surface):withLimits(limits.side),
        }
        
        local guidelines = {
            surface = offsets.tracks * pipe.map(function(o) return guideline.surface + o * (radius.surface > 0 and -1 or 1) end),
            underground = offsets.tracks * pipe.map(function(o) return guideline.underground + o * (radius.underground > 0 and -1 or 1) end),
            side = pipe.new * {offsets.tracks[1] - 5.5, offsets.tracks[#offsets.tracks] + 5.5}
            * pipe.map(function(o) return guideline.side + o * (radius.surface > 0 and -1 or 1) end)
        }
        
        local fz = {
            surface = pipe.exec * function()
                local ln = line.byPtPt(coor.xy(radInit.surface, -height), coor.xy(radInit.surface + radFinal.surface, height * (-1 + pctLength.surface)))
                return function(rad) return {z = (ln - line.byVecPt(coor.xy(0, 1), coor.xy(rad, 0))).y, s = -slope} end
            end,
            underground = pipe.exec * function()
                local ln = line.byPtPt(coor.xy(radInit.underground, -height), coor.xy(radInit.underground - radFinal.underground, (-1 - pctLength.underground) * height))
                return function(rad) return {z = (ln - line.byVecPt(coor.xy(0, 1), coor.xy(rad, 0))).y, s = -slope} end
            end
        }
        
        local zsList = {
            surface = {
                {
                    coor.transZ(fz.surface(limits.surface.inf).z),
                    coor.transZ(fz.surface(limits.surface.mid).z),
                    coor.transZ(fz.surface(limits.surface.inf).s),
                    coor.transZ(fz.surface(limits.surface.mid).s)
                },
                {
                    coor.transZ(fz.surface(limits.surface.mid).z),
                    coor.transZ(fz.surface(limits.surface.sup).z),
                    coor.transZ(fz.surface(limits.surface.mid).s),
                    coor.transZ(fz.surface(limits.surface.sup).s)
                }
            },
            underground = {
                {
                    coor.transZ(fz.underground(limits.underground.inf).z),
                    coor.transZ(fz.underground(limits.underground.mid).z),
                    coor.transZ(fz.underground(limits.underground.inf).s),
                    coor.transZ(fz.underground(limits.underground.mid).s)
                },
                {
                    coor.transZ(fz.underground(limits.underground.mid).z),
                    coor.transZ(fz.underground(limits.underground.sup).z),
                    coor.transZ(fz.underground(limits.underground.mid).s),
                    coor.transZ(fz.underground(limits.underground.sup).s)
                }
            }
        }
        
        local edges = station.fusionEdges({
            guidelines.surface
            * pipe.map(tdp.generateArc)
            * pipe.map(pipe.range(1, 2))
            * pipe.map(pipe.map2(zsList.surface, function(ar, zs) return func.map2(ar, zs, coor.apply) end))
            * pipe.map(function(segs) return {edge = pipe.new * segs, snap = pipe.new / {true, false} / {false, false}} end),
            guidelines.underground
            * pipe.map(tdp.generateArc)
            * pipe.map(pipe.range(1, 2))
            * pipe.map(pipe.map2(zsList.underground, function(ar, zs) return func.map2(ar, zs, coor.apply) end))
            * pipe.map(function(segs) return {edge = pipe.new * segs, snap = pipe.new / {false, false} / {false, true}} end)
        })
        / (guidelines.side
        * pipe.map(tdp.generateArc)
        * pipe.map(pipe.range(1, 3))
        * pipe.map(function(segs) return {edge = pipe.new * segs, snap = pipe.new / {false, false} / {false, true} / {true, false}} end))
        
        local wallGuidelines = offsets.walls
            * pipe.map(function(o) return guideline.surface + (o) * (radius.surface > 0 and -1 or 1) end)
        
        local trackPavingGuidelines = offsets.walls
        * pipe.map2({1, -1}, function(o, d) return guideline.surface + (o + d) * (radius.surface > 0 and -1 or 1) end)

        local polys = tdp.generatePolyArc(wallGuidelines, "inf", "sup")(0, radius.surface > 0 and -1 or 1)
        local slotPolys = tdp.generatePolyArc(wallGuidelines, "mid", "sup")(0, 0)
        local polysTracks = tdp.generatePolyArc(wallGuidelines, "inf", "sup")(0, radius.surface > 0 and -0.5 or 0.5)
            * pipe.map(pipe.map(function(p) return coor.transZ(fz.surface(p.rad).z - 0.01)(p) end))
        
        local mPlace = function(fitModel, arcL, arcR, rad1, rad2)
            local size = {
                lt = arcL:pt(rad1):withZ(0),
                lb = arcL:pt(rad2):withZ(0),
                rt = arcR:pt(rad1):withZ(0),
                rb = arcR:pt(rad2):withZ(0)
            }
    
            return coor.transZ(-9) * fitModel(size)
        end
        
        local wallType = 1
        
        local makeWallL = tdp.makeFn(false)(wallList[wallType], tdp.fitModel2D, mPlace, 0.5)
        local makeWallR = tdp.makeFn(false)(wallList[wallType], tdp.fitModel2D, mPlace, 0.5)
        local makeRoof =  tdp.makeFn(false)(models.mRoof, tdp.fitModel2D, mPlace, 5)

        local makePaving = tdp.makeFn(false)(
            "track_design_patterns/paving_base",
            tdp.fitModel,
            function(fitModel, arcL, arcR, rad1, rad2)
                local z1, z2 = fz.surface(rad1).z, fz.surface(rad2).z
                local size = {
                    lb = arcL:pt(rad1):withZ(z1),
                    lt = arcL:pt(rad2):withZ(z2),
                    rb = arcR:pt(rad1):withZ(z1),
                    rt = arcR:pt(rad2):withZ(z2)
                }
                return fitModel(size)
            end,
            1,
            5
        )

        local walls = pipe.new
            + {pipe.new * makeWallL(wallGuidelines[1] + (radius.surface > 0 and 0.2 or -0.2)) * pipe.flatten()}
            + {pipe.new * makeWallR(wallGuidelines[2] + (radius.surface < 0 and 0.2 or -0.2)) * pipe.flatten()}
            + {pipe.new * makePaving(trackPavingGuidelines[1] + (radius.surface > 0 and 0.4 or -0.4)) * pipe.flatten()}
            + {pipe.new * makePaving(trackPavingGuidelines[2] + (radius.surface < 0 and 0.4 or -0.4)) * pipe.flatten()}
            + func.mapi(offsets.tracks, function(o, i)
                local sizeF = {
                    lt = coor.xyz(o - 3, -1, 0),
                    rt = coor.xyz(o + 3, -1, 0),
                    lb = coor.xyz(o - 3, 0, 0),
                    rb = coor.xyz(o + 3, 0, 0),
                }

                local sizeR = {
                    lt = coor.xyz(o - (i == 1 and 3.75 or 2.5), 0, 0),
                    lb = coor.xyz(o - (i == 1 and 3.75 or 2.5), 4, 0),
                    rt = coor.xyz(o + (i == #offsets.tracks and 3.75 or 2.5), 0, 0),
                    rb = coor.xyz(o + (i == #offsets.tracks and 3.75 or 2.5), 4, 0),
                }
                
                return {
                    station.newModel(models.mRoofFenceF.."_tl.mdl", coor.transZ(-0.5), tdp.fitModel2D(6, 0.5)(false)(true, true)(sizeF)),
                    station.newModel(models.mRoofFenceF.."_br.mdl", coor.transZ(-0.5), tdp.fitModel2D(6, 0.5)(false)(false, false)(sizeF))
                }
            end)
        
        return pipe.new
            * {
                edgeLists = {
                    pipe.new * func.map({edges[1]}, station.mergeEdges) * station.prepareEdges * trackBuilder.nonAligned(),
                    pipe.new * func.map({edges[2]}, station.mergeEdges) * station.prepareEdges * trackBuilder.tunnel("void_entry.lua"),
                    pipe.new / {} / func.map({edges[3]}, station.mergeEdges) / {station.mergeEdges({edges[3][1]})} / {station.mergeEdges({edges[3][2]})}
                    * pipe.select(params.paraTracks + 1) * station.prepareEdges * trackBuilder.normal(),
                }
                ,
                models = walls * pipe.flatten(),
                terrainAlignmentLists = station.mergePoly(
                    {
                        equal = 
                            station.projectPolys(coor.I())(polys) 
                            / station.surfaceOf(coor.xyz(nbTracks * 5 + 2.5, 5, 0.1), coor.xyz(0, 2, 0.1))
                            + station.projectPolys(coor.I())(polysTracks) * function(p) return p * pipe.range(1, 4) * pipe.filter(pipe.noop()) end
                    }
                )()
                ,
                groundFaces = (pipe.new
                + polys * pipe.map(function(p) return {face = func.map(p, coor.vec2Tuple), modes = {{type = "STROKE_OUTER", key = "ballast"}}} end)
                + slotPolys * pipe.map(function(p) return  {face = func.map(p, coor.vec2Tuple), modes = {{type = "FILL", key = "hole"}}} end)
                + {
                    {
                        face = station.surfaceOf(coor.xyz(nbTracks * 5 + 2.5, 5, 0), coor.xyz(0, 2, 0)),
                        modes = {{type = "FILL", key = "track_design_patterns/paving_fill"}}
                    },
                    {
                        face = station.surfaceOf(coor.xyz(nbTracks * 5 + 2.5, 5, 0), coor.xyz(0, 2, 0)),
                        modes = {{type = "STROKE_OUTER", key = "ballast"}}
                    }
                }
            )
            }
            * station.setSlope((params.generalSlopeSign == 0 and 1 or -1) * (generalSlopeList[params.generalSlope + 1]))
            * station.setHeight(func.seq(-10, 15)[params.height + 1])
    end
end


function data()
    return {
        type = "RAIL_DEPOT",
        description = {
            name = _("Compact Tunnel entry"),
            description = _("A compact tunnel entry")
        },
        availability = {
            yearFrom = 1860
        },
        order = 27229,
        skipCollision = false,
        autoRemovable = false,
        params = params(),
        
        updateFn = updateFn(
            {
                mRoofFenceF = "track_design_patterns/roof_fence_front",
                mRoof = "track_design_patterns/roof",
            }
    )
    }

end
