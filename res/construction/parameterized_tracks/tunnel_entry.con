local paramsutil = require "paramsutil"
local func = require "flyingjunction/func"
local coor = require "flyingjunction/coor"
local trackEdge = require "flyingjunction/trackedge"
local line = require "flyingjunction/coorline"
local arc = require "flyingjunction/coorarc"
local station = require "flyingjunction/stationlib"
local pipe = require "flyingjunction/pipe"
local junction = require "junction"
local jA = require "junction_assoc"
local jM = require "junction_main"

local rList = {junction.infi * 0.001, 5, 3.5, 2, 1, 4 / 5, 2 / 3, 3 / 5, 1 / 2, 1 / 3, 1 / 4, 1 / 5, 1 / 6, 1 / 8, 1 / 10, 1 / 20}
local slopeList = {15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 80, 90, 100}
local generalSlopeList = {0, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 80, 90}

local flatProfile = function()
    return {
        {
            pt = function(x) return coor.xy(x, 0) end,
            slope = function(_) return 0 end,
            pred = function(_) return true end,
        },
    }
end

local slopeProfile = function(slope)
    local ar = arc.byOR(coor.xy(slope.length, -slope.factor * (slope.trans.r - slope.height) - slope.height), slope.trans.r)
    local pTr = ar:pt(slope.factor * (math.pi * 0.5) + slope.rad)
    local lineSlope = line.byPtPt(coor.xy(0, -slope.height), pTr)
    return {
        {
            pred = function(x) return x <= pTr.x end,
            slope = function(_) return -lineSlope.a / lineSlope.b end,
            pt = function(x) return lineSlope - line.byVecPt(coor.xy(0, 1), coor.xy(x, 0)) end
        },
        {
            pred = function(x) return x > pTr.x and x < slope.length end,
            slope = function(pt) return math.tan(ar:rad(pt) - math.pi * 0.5) end,
            pt = function(x) return (slope.factor > 0 and func.max or func.min)(ar / line.byVecPt(coor.xy(0, 1), coor.xy(x, 0)), function(p, q) return p.y < q.y end) end
        },
        {
            pred = function(x) return x >= slope.length end,
            slope = function(_) return 0 end,
            pt = function(x) return slope.factor > 0 and coor.xy(x, 0) or coor.xy(x, -2 * slope.height) end
        },
    }
end

local function generateSlope(slope, height)
    local sFactor = slope > 0 and 1 or -1
    local rad = math.atan(slope)
    local rTrans = 300
    local trans = {
        r = rTrans,
        dz = sFactor * rTrans * (1 - math.cos(rad)),
        length = sFactor * rTrans * math.sin(rad)
    }
    local s = {
        slope = slope,
        rad = rad,
        factor = sFactor,
        length = math.abs((height - trans.dz) / slope + trans.length),
        trans = trans,
        height = math.abs(height)
    }
    return {
        slope = s,
        slopeProfile = slopeProfile(s)
    }
end


local composite = function(config)
    local offsets = junction.buildCoors(config.nbTracks, config.nbTracks)
    local guideline = arc.byOR(coor.xyz(config.r, 0, 0), math.abs(config.r))
    
    local tracks = offsets.tracks * pipe.map(function(o) return guideline + o end)
        * pipe.map(function(tr)
            local fn = jA.retriveFn(config)
            return {
                guidelines = fn.retriveArc(tr),
                fn = fn,
                config = config,
            }
        end)
    
    local walls = offsets.walls
        * pipe.map(function(o) return func.with(guideline + o, {xOffset = o}) end)
        * pipe.map(function(wa)
            local fn = jA.retriveFn(config)
            local mPlaceD = function(g, rad1, rad2)
                local radc = (rad1 + rad2) * 0.5
                return coor.rotZ(radc) * coor.trans(func.with(g:pt(radc), {z = -11}))
            end
            local wall = fn.retriveArc(wa) * function(w) return {w[1]:extendLimits(-0.125), w[2]:extendLimits(0.125)} end
            return
                wall * pipe.map(junction.makeFn(config.models.mSidePillar, mPlaceD, coor.scaleY(1.05)))
                + wall * pipe.map(junction.makeFn(config.models.mRoofFenceS, mPlaceD, coor.scaleY(1.05)))
                + fn.retriveArc(wa + (wa.xOffset > 0 and 0.75 or -0.75)) * pipe.map(junction.makeFn(config.models.mSideOutter, mPlaceD, coor.transZ(0.0001) * coor.scale({x = 2, y = 1.05, z = 1})))
                + fn.retriveArc(wa + (wa.xOffset > 0 and 1.25 or -1.25)) * pipe.map(junction.makeFn(config.models.mSideOutter, mPlaceD, coor.transZ(0.0001) * coor.scale({x = 2, y = 1.05, z = 1})))
        end)
        * pipe.map(pipe.flatten())
        * pipe.map(pipe.flatten())
        +
        func.map(offsets.tracks, function(o) return
            {
                station.newModel(config.models.mRoofFenceF, coor.trans({x = o, z = -11, y = 0})),
                station.newModel(config.models.mRoofFenceF, coor.trans({x = o, z = -11.5, y = 0})),
                station.newModel(config.models.mRoof, coor.scale({x = 1.8, y = 0.8, z = 1}), coor.trans({x = o, z = -11 + 0.0001, y = 2}), coor.scaleZ(0.5))
            }
        end)
    
    local sideEdges = pipe.new + (config.inner and {(offsets.tracks[1] - 5.5)} or {}) + (config.outer and {offsets.tracks[#offsets.tracks] + 5.5} or {})
    
    local extraTracks = sideEdges * pipe.map(function(o) return guideline + o end)
        * pipe.map(function(tr)
            local fn = jA.retriveFn(func.with(config, {slopeProfile = flatProfile(), height = 0}))
            return {
                guidelines = fn.retriveArc(tr)
                * function(ls) return {ls[1]:extendLimits(-4), ls[2]:extendLimits(4)} end,
                fn = fn,
                config = config,
            }
        end)
    
    return {
        edges = jA.retriveTracks(tracks),
        extraEdges = jA.retriveTracks(extraTracks),
        outerPolys = jA.retrivePolys(5, 4.5)(tracks),
        polys = jA.retrivePolys(1.25, 3.5)(tracks),
        surface = jA.retriveTrackSurfaces(tracks),
        walls = walls,
        offsets = offsets
    }
end
local function params()
    local sp = "----------------------------\n"
    return {
        paramsutil.makeTrackTypeParam(),
        paramsutil.makeTrackCatenaryParam(),
        {
            key = "nbTracks",
            name = _("Number of tracks"),
            values = {_("1"), _("2"), _("3"), _("4"), _("5"), _("6"), },
            defaultIndex = 1
        },
        {
            key = "signS",
            name = sp,
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "radiusS",
            name = _("Surface Radius") .. ("(m)"),
            values = pipe.from("∞") + func.map(func.range(rList, 2, #rList), function(r) return tostring(math.floor(r * 1000 + 0.5)) end),
            defaultIndex = 0
        },
        {
            key = "signU",
            name = sp,
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "radiusU",
            name = _("Underground Radius") .. ("(m)"),
            values = pipe.from("∞") + func.map(func.range(rList, 2, #rList), function(r) return tostring(math.floor(r * 1000 + 0.5)) end),
            defaultIndex = 0
        },
        {
            key = "slopeSign",
            name = sp,
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "slope",
            name = _("Slope(‰)"),
            values = func.map(slopeList, tostring),
            defaultIndex = #slopeList - 1
        },
        {
            key = "generalSlopeSign",
            name = sp,
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "generalSlope",
            name = _("General Slope(‰)"),
            values = func.map(generalSlopeList, tostring),
            defaultIndex = 0
        },
        {
            key = "paraTracks",
            name = sp .. _("Parellal tracks"),
            values = {_("None"), _("Both"), _("Inner"), _("Outer")},
            defaultIndex = 1
        }
    }

end

local function defaultParams(param)
    local function limiter(d, u)
        return function(v) return v and v < u and v or d end
    end
    
    func.forEach(params(), function(i)param[i.key] = limiter(i.defaultIndex or 0, #i.values)(param[i.key]) end)
end

local updateFn = function(models)
    return function(params)
        defaultParams(params)
        
        local trackType = ({"standard.lua", "high_speed.lua"})[params.trackType + 1]
        local catenary = params.catenary == 1
        local trackBuilder = trackEdge.builder(catenary, trackType)
        local height = 8.5
        
        local nbTracks = params.nbTracks + 1
        local slope = (params.slopeSign == 0 and 1 or -1) * slopeList[params.slope + 1] * 0.001
        local rS = (rList[params.radiusS + 1] * 1000) * (params.signS == 0 and 1 or -1)
        local rU = (rList[params.radiusU + 1] * 1000) * (params.signU == 0 and 1 or -1)
        
        local surface = composite(func.with(
            {
                initRad = rS > 0 and math.pi or 0,
                height = -height,
                r = rS,
                nbTracks = nbTracks,
                radFactor = 1,
                frac = 1,
                models = models,
                inner = func.contains({1, 2}, params.paraTracks),
                outer = func.contains({1, 3}, params.paraTracks)
            }, generateSlope(slope, height))
        )
        local underground = composite(func.with({
            initRad = rU > 0 and math.pi or 0,
            height = -height,
            r = rU,
            frac = 1,
            nbTracks = nbTracks,
            radFactor = -1,
            models = models
        }, generateSlope(-slope, -height))
        )
        local edges = station.fusionEdges({
            surface.edges.inf,
            surface.edges.main,
            underground.edges.main * (rS * rU < 0 and pipe.rev() or pipe.noop()),
            underground.edges.sup * (rS * rU < 0 and pipe.rev() or pipe.noop())
        })
        
        return
            pipe.new
            * {
                edgeLists =
                {
                    pipe.new * func.map({edges[1], edges[2]}, station.mergeEdges) * station.prepareEdges * trackBuilder.nonAligned(),
                    pipe.new * func.map({edges[3], edges[4]}, station.mergeEdges) * station.prepareEdges * trackBuilder.tunnel("void_entry.lua"),
                    pipe.new * func.map({surface.extraEdges.inf, surface.extraEdges.main, surface.extraEdges.sup}, station.mergeEdges) * station.prepareEdges * trackBuilder.normal(),
                },
                models = (surface.walls + surface.surface) * pipe.flatten(),
                terrainAlignmentLists = jM.mergePoly({
                    equal = jM.projectPolys(coor.I())(surface.outerPolys.polys),
                    greater = jM.projectPolys(coor.I())(surface.polys.trackPolys),
                    slot = jM.projectPolys(coor.I())(surface.polys.trackPolys),
                }),
                groundFaces = (pipe.new
                + surface.outerPolys.polys
                * pipe.mapFlatten(function(p)
                    return {
                        {face = func.map(p, coor.vec2Tuple), modes = {{type = "FILL", key = "track_design_patterns/paving_fill"}}},
                        {face = func.map(p, coor.vec2Tuple), modes = {{type = "STROKE_OUTER", key = "ballast"}}}
                    }
                end)
            )
            }
            * station.setSlope((params.generalSlopeSign == 0 and 1 or -1) * (generalSlopeList[params.generalSlope + 1]))
    end
end


function data()
    return {
        type = "ASSET_DEFAULT",
        description = {
            name = _("Compact Tunnel entry"),
            description = _("A compact tunnel entry")
        },
        availability = {
            yearFrom = 1892
        },
        buildMode = "SINGLE",
        categories = {"misc"},
        order = 27218,
        skipCollision = false,
        autoRemovable = false,
        params = params(),
        
        updateFn = updateFn(
            {
                mSidePillar = "flying_junction/concrete/pillar_side.mdl",
                mRoofFenceF = "flying_junction/concrete/roof_fence_front.mdl",
                mRoofFenceS = "flying_junction/concrete/roof_fence_side.mdl",
                mRoof = "flying_junction/concrete/roof.mdl",
                mSideOutter = "track_design_patterns/pillar_side.mdl",
                bridgeType = "z_concrete_flying_junction.lua",
            }
    )
    }

end
