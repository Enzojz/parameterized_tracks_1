local paramsutil = require "paramsutil"
local func = require "flyingjunction/func"
local coor = require "flyingjunction/coor"
local line = require "flyingjunction/coorline"
local trackEdge = require "flyingjunction/trackedge"
local arc = require "flyingjunction/coorarc"
local station = require "flyingjunction/stationlib"
local pipe = require "flyingjunction/pipe"
local junction = require "junction"

local dump = require "datadumper"

local abs = math.abs
local pi = math.pi

local rList = {junction.infi * 0.001, 5, 3.5, 2, 1, 4 / 5, 2 / 3, 3 / 5, 1 / 2, 1 / 3, 1 / 4, 1 / 5, 1 / 6, 1 / 8, 1 / 10, 1 / 20}
local wallList = {
    "flying_junction/concrete/pillar_side.mdl",
    "flying_junction/brick/pillar_side.mdl",
    "asset/track_multi_sound_insulation_10m.mdl"
}
local wallLengthList = {5, 5, 10}
local wallTransList = {
    function(h) return coor.scaleX(2) * coor.transZ((h > 0 and h or 0) - 11) end,
    function(h) return coor.scaleX(2) * coor.transZ((h > 0 and h or 0) - 11) end,
    function(h) return coor.transY(3.2) * coor.rotZ(pi * 0.5) * coor.transZ((h > 8 and 8 or abs(h)) - 5.1) end
}

local function mPlace(guideline, rad1, rad2)
    local rad = rad2 and (rad1 + rad2) * 0.5 or rad1
    local pt = guideline:pt(rad)
    return coor.rotZ(rad) * coor.trans(func.with(pt, {z = 0}))
end

local function params()
    local sp = "·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·\n"
    return {
        paramsutil.makeTrackTypeParam(),
        paramsutil.makeTrackCatenaryParam(),
        {
            key = "nbTracks",
            name = _("Number of tracks"),
            values = {_("1"), _("2"), _("3"), _("4"), _("5"), _("6"), _("7"), _("8"), _("9"), _("10"), _("12"), },
            defaultIndex = 1
        },
        {
            key = "lengthD",
            name = sp .. "\n" .. _("Length") .. " \n\n×10m",
            values = func.seqMap({0, 9}, tostring),
            defaultIndex = 0
        },
        {
            key = "lengthC",
            name = "×100m",
            values = func.seqMap({0, 9}, tostring),
            defaultIndex = 1
        },
        {
            key = "lengthM",
            name = "×1000m",
            values = func.seqMap({0, 9}, tostring),
            defaultIndex = 0
        },
        {
            key = "sign",
            name = sp .. "\n" .. _("Radius") .. "(m)",
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "radius",
            name = "",
            values = pipe.from("∞") + func.map(func.range(rList, 2, #rList), function(r) return tostring(math.floor(r * 1000 + 0.5)) end),
            defaultIndex = 0
        },
        {
            key = "dHSign",
            name = sp .. "\n" .. _("ΔHeight") .. "(m)",
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "dHeight",
            name = "",
            values = func.seqMap({0, 9}, tostring),
            defaultIndex = 0
        },
        {
            key = "dHeightD",
            name = "×10m",
            values = func.seqMap({0, 9}, tostring),
            defaultIndex = 0
        },
        {
            key = "signalSpacingD",
            name = sp .. "\n" .. _("Signal Spacing") .. "\n\n×10m",
            values = func.seqMap({0, 9}, tostring),
            defaultIndex = 0
        
        },
        {
            key = "signalSpacingC",
            name = "×100m",
            values = func.seqMap({0, 9}, tostring),
            defaultIndex = 0
        
        },
        {
            key = "signalSpacingM",
            name = "×1000m",
            values = func.seqMap({0, 9}, tostring),
            defaultIndex = 0
        
        },
        {
            key = "signalPattern",
            name = _("Signal Pattern"),
            values = {"↓↑↓↑", "↑↓↑↓", "↓↓↑↑", "↑↑↓↓", "↓↓↓↓", "↑↑↑↑", "↕↕↕↕"},
            defaultIndex = 0,
        },
        {
            key = "wallASign",
            name = sp .. "\n" .. _("Wall A") .. "\n" .. _("Height"),
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "wallAHeight",
            name = "",
            values = func.seqMap({0, 11}, tostring),
            defaultIndex = 0
        },
        {
            key = "wallBSign",
            name = sp .. "\n" .. _("Wall B") .. "\n" .. _("Height"),
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "wallBHeight",
            name = "",
            values = func.seqMap({0, 11}, tostring),
            defaultIndex = 0
        },
        {
            key = "wallType",
            name = sp .. "\n" .. _("Wall Type"),
            values = {_("Concrete"), _("Stone brick"), _("Noise barrier")},
            defaultIndex = 0
        },
        {
            key = "wallOffset",
            name = "Wall-Track distance",
            values = func.seqMap({0, 8}, function(n) return tostring(n * 0.5) end),
            defaultIndex = 1
        },
        {
            key = "terrain",
            name = _("Terrain Alignment"),
            values = {_("Normal"), _("Sharp")},
            defaultIndex = 0
        },
        {
            key = "height",
            name = _("Altitude Adjustment"),
            values = func.seqMap({0, 10}, tostring),
            defaultIndex = 0
        }
    }
end

local function defaultParams(param)
    local function limiter(d, u)
        return function(v) return v and v < u and v or d end
    end
    
    func.forEach(params(), function(i)param[i.key] = limiter(i.defaultIndex or 0, #i.values)(param[i.key]) end)
end

local updateFn = function(models)
    return function(params)
        defaultParams(params)
        
        local trackType = ({"standard.lua", "high_speed.lua"})[params.trackType + 1]
        local catenary = params.catenary == 1
        local trackBuilder = trackEdge.builder(catenary, trackType)
        
        local nbTracks = params.nbTracks + 1
        local radius = (rList[params.radius + 1] * 1000) * (params.sign == 0 and 1 or -1)
        local length = params.lengthD * 10 + params.lengthC * 100 + params.lengthM * 1000
        local signalSpacing = (function(s) return s == 0 and length or s end)(params.signalSpacingD * 10 + params.signalSpacingC * 100 + params.signalSpacingM * 1000)
        
        local height = (params.dHSign == 0 and 1 or -1) * params.dHeight + params.dHeightD * 10
        local slope = height / length
        
        local offsets = junction.buildCoors(nbTracks, nbTracks)
        local initRad = radius > 0 and pi or 0
        local dRad = math.abs(length / radius) < 2 * pi and -length / radius or 2 * pi * 0.99
        
        local function signalGrouping(result, leftLength)
            return leftLength <= 0 and result / 1 or signalGrouping(result / ((length - leftLength) / length), leftLength - signalSpacing)
        end
        
        local fz = pipe.exec * function()
            local ln = line.byPtPt(coor.xy(initRad, 0), coor.xy(initRad + dRad, height))
            return function(rad) return (ln - line.byVecPt(coor.xy(0, 1), coor.xy(rad, 0))).y end
        end
        
        local limits = signalGrouping(pipe.new, length)
            * function(r) return func.map2(
                func.range(r, 1, #r - 1),
                func.range(r, 2, #r),
                function(f, t) return
                    {
                        inf = initRad + f * dRad,
                        mid = initRad + (f + t) * 0.5 * dRad,
                        sup = initRad + t * dRad
                    }
                end)
            end
        
        local guideline = arc.byOR(coor.xyz(radius, 0, 0), abs(radius)):withLimits({
            inf = initRad,
            mid = initRad + 0.5 * dRad,
            sup = initRad + dRad,
            offset = 0
        })
        
        local guidelines = offsets.tracks
            * (radius < 0 and pipe.noop() or pipe.rev())
            * pipe.map(function(o)
                local g = (guideline + o)
                return limits
                    * pipe.map(function(l) return func.with(g:withLimits(l), {offset = o}) end)
            end)
        
        local zsList = limits
            * pipe.map(function(l)
                return {
                    {coor.transZ(fz(l.inf)), coor.transZ(fz(l.mid)), coor.transZ(slope), coor.transZ(slope)},
                    {coor.transZ(fz(l.mid)), coor.transZ(fz(l.sup)), coor.transZ(slope), coor.transZ(slope)}
                }
            end)
        
        local arcs = guidelines
            * pipe.map(pipe.map(junction.generateArc))
            * pipe.map(pipe.map(pipe.range(1, 2)))
            * pipe.map(pipe.map2(zsList, function(a, zs) return func.map2(a, zs, function(ar, nz) return func.map2(ar, nz, coor.apply) end) end))
            * pipe.map(function(segs) return pipe.new
                * func.map2(segs, func.seq(1, #segs), function(e, i) return {
                    edge = pipe.new * e,
                    snap = pipe.new / {i == 1, false} / {false, i == #segs}
                } end)
            end)
            * pipe.map(station.joinEdges)
            * pipe.map(station.mergeEdges)
        
        
        local signalOffset = 5 / (signalSpacing < 20 and 20 or signalSpacing)
        
        local leftSignal = function(i) return i % 2 == 0 and {{true, signalOffset}} or {} end
        local rightSignal = function(i) return i % 2 == 1 and {{false, 1 - signalOffset}} or {} end
        
        local signalPattern = ({
            function(n, i) return n % 2 == 1 and leftSignal(i) or rightSignal(i) end,
            function(n, i) return n % 2 ~= 1 and leftSignal(i) or rightSignal(i) end,
            function(n, i) return n <= nbTracks * 0.5 and leftSignal(i) or rightSignal(i) end,
            function(n, i) return n > nbTracks * 0.5 and leftSignal(i) or rightSignal(i) end,
            function(_, i) return leftSignal(i) end,
            function(_, i) return rightSignal(i) end,
            function(_, i) return i == 1 and {{true, signalOffset}} or (i == #limits * 2 and {{false, 1 - signalOffset}} or {}) end
        })[params.signalPattern + 1];
        
        local wallHeight = {
            A = params.wallAHeight * (params.wallASign == 0 and 1 or -1),
            B = params.wallBHeight * (params.wallBSign == 0 and 1 or -1)
        }
        
        local wallGuidelines = offsets.walls
            * (radius < 0 and pipe.noop() or pipe.rev())
            * pipe.map(function(o)
                return func.with(guideline + o + params.wallOffset * 0.5 * (o > 0 and 1 or -1), {offset = o})
            end)
        
        local restrictedWallGuidelines = offsets.walls
            * (radius < 0 and pipe.noop() or pipe.rev())
            * pipe.map(function(o)
                return pipe.new
                    * func.seq(-0.5, params.wallOffset * 0.5)
                    * pipe.map(function(ro) return ro * (o > 0 and 1 or -1) end)
                    * pipe.map(function(ro) return guideline + o + ro end)
            end)
        
        local polys = pipe.new
            / {g = {wallGuidelines[1], guideline}, o = wallHeight.A > 0 and 1 or -1}
            / {g = {guideline, wallGuidelines[2]}, o = wallHeight.B > 0 and 1 or -1}
            * pipe.map(function(g) return junction.generatePolyArc(g.g, "inf", "sup")(0, g.o) end)
            * pipe.map(pipe.map(pipe.map(function(p) return coor.transZ(fz(p.rad))(p) end)))
        
        local wallModel = wallList[params.wallType + 1]
        local wallLength = wallLengthList[params.wallType + 1]
        local wallTrans = wallTransList[params.wallType + 1]
        
        local makeWallA = junction.makeFn(wallModel, mPlace, wallTrans(wallHeight.A), wallLength)
        local makeWallB = junction.makeFn(wallModel, mPlace, wallTrans(wallHeight.B), wallLength)
        
        local walls = pipe.new
            + {wallHeight.A == 0 and {} or
                (
                wallHeight.A > 0 and
                pipe.new * wallGuidelines[1] * makeWallA * pipe.flatten() or
                restrictedWallGuidelines[1] * pipe.map(makeWallA) * pipe.map(pipe.flatten()) * pipe.flatten()
            )
            }
            + {wallHeight.B == 0 and {} or
                (
                wallHeight.B > 0 and
                pipe.new * wallGuidelines[2] * makeWallB * pipe.flatten() or
                restrictedWallGuidelines[2] * pipe.map(makeWallB) * pipe.map(pipe.flatten()) * pipe.flatten()
            )
            }

        
        return
            pipe.new
            * {
                edgeLists =
                {
                    pipe.new * {arcs} * station.fusionEdges * pipe.map(station.mergeEdges) * station.prepareEdges * trackBuilder.nonAligned(),
                },
                edgeObjects = pipe.new
                * func.seqMap({0, nbTracks - 1}, function(n) return
                    func.seqMap({0, #limits * 2 - 1}, function(i) return
                        func.map(signalPattern(n + 1, i + 1), function(p)
                            local isLeft, pos = table.unpack(p)
                            return {
                                edge = n * #limits * 2 + i,
                                param = pos,
                                left = isLeft,
                                model = "railroad/signal_new_block.mdl"
                            }
                        end)
                    end)
                end)
                * pipe.flatten()
                * pipe.flatten(),
                models = walls * pipe.flatten(),
                terrainAlignmentLists = station.mergePoly(
                    params.terrain == 0 and
                    {
                        equal = station.projectPolys(coor.I())(polys * pipe.flatten())
                    }
                    or
                    {
                        less = station.projectPolys(coor.transZ(math.max(wallHeight.A, wallHeight.B)))(polys * pipe.flatten()),
                        platform = station.projectPolys(coor.I())(polys * pipe.flatten()),
                        slot = station.projectPolys(coor.I())(polys * pipe.flatten())
                    }
                ),
                groundFaces = polys
                * pipe.flatten()
                * pipe.mapFlatten(function(p)
                    return {
                        {face = func.map(p, coor.vec2Tuple), modes = {{type = "FILL", key = "track_design_patterns/paving_fill"}}},
                        {face = func.map(p, coor.vec2Tuple), modes = {{type = "STROKE_OUTER", key = "ballast"}}}
                    }
                end)
            }
            * station.setHeight(-params.height)
    end
end


function data()
    return {
        type = "RAIL_DEPOT",
        description = {
            name = _("Parallel tracks"),
            description = _("A compact tunnel entry")
        },
        availability = {
            yearFrom = 1892
        },
        -- buildMode = "SINGLE",
        -- categories = {"misc"},
        order = 27218,
        -- skipCollision = false,
        -- autoRemovable = false,
        params = params(),
        
        updateFn = updateFn(
            {
                mSidePillar = "flying_junction/concrete/pillar_side.mdl",
                mRoofFenceF = "flying_junction/concrete/roof_fence_front.mdl",
                mRoofFenceS = "flying_junction/concrete/roof_fence_side.mdl",
                mRoof = "flying_junction/concrete/roof.mdl",
                bridgeType = "z_concrete_flying_junction.lua",
            }
    )
    }

end
